{
    "sourceFile": "src/services/firebase/firestoreService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1758507796240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758507817261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,17 +11,8 @@\n   onSnapshot,\r\n   getDoc\r\n } from 'firebase/firestore';\r\n \r\n-/**\r\n- * Transforma um documento do Firestore em um objeto de agendamento, garantindo o ID.\r\n- * @param {import('firebase/firestore').DocumentSnapshot} doc - O documento do Firestore.\r\n- * @returns {object} O objeto de agendamento com id.\r\n- */\r\n-const transformDocToAgendamento = (doc) => ({\r\n-  ...doc.data(),\r\n-  id: doc.id,\r\n-});\r\n \r\n \r\n \r\n /**\r\n@@ -42,10 +33,8 @@\n   return agendamentos.map((agenda) => ({\r\n     ...agenda,\r\n     status: agenda.status || 'Pendente',\r\n   }));\r\n-  // Usa a função auxiliar para transformar os documentos e evitar repetição de código.\r\n-  return querySnapshot.docs.map(transformDocToAgendamento);\r\n }\r\n \r\n /**\r\n  * Listener em tempo real\r\n@@ -68,10 +57,8 @@\n           ...agenda,\r\n           status: agenda.status || 'Pendente',\r\n       }));\r\n       onData(mappedData);\r\n-      const agendamentos = querySnapshot.docs.map(transformDocToAgendamento);\r\n-      onData(agendamentos);\r\n     },\r\n     (error) => { // Callback de erro\r\n       console.error(\"Erro no listener de agendamentos:\", error);\r\n       onError(error);\r\n@@ -84,15 +71,8 @@\n  * @param {Object} agendamento\r\n  */\r\n export async function createAgendamento(agendamento) {\r\n   return await addDoc(collection(db, 'agendamentos'), agendamento);\r\n-  // Garante que todo novo agendamento tenha um status padrão e data de criação.\r\n-  const newAgendamento = {\r\n-    ...agendamento,\r\n-    status: agendamento.status || 'Pendente',\r\n-    createdAt: new Date(),\r\n-  };\r\n-  return await addDoc(collection(db, 'agendamentos'), newAgendamento);\r\n }\r\n \r\n /**\r\n  * Atualizar agendamento\r\n"
                },
                {
                    "date": 1759370785064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,28 @@\n-import { db } from './firebaseConnection';\r\n import {\r\n+  addDoc,\r\n   collection,\r\n-  addDoc,\r\n+  deleteDoc,\r\n   doc,\r\n-  updateDoc,\r\n-  deleteDoc,\r\n   getDocs,\r\n+  onSnapshot,\r\n   query,\r\n-  where,\r\n-  onSnapshot,\r\n-  getDoc\r\n+  setDoc,\r\n+  updateDoc,\r\n+  where\r\n } from 'firebase/firestore';\r\n+import { db } from './firebaseConnection';\r\n \r\n+/**\r\n+ * Transforma um documento do Firestore em um objeto de agendamento, garantindo o ID.\r\n+ * @param {import('firebase/firestore').DocumentSnapshot} doc - O documento do Firestore.\r\n+ * @returns {object} O objeto de agendamento com id.\r\n+ */\r\n+const transformDocToAgendamento = (doc) => ({\r\n+  ...doc.data(),\r\n+  id: doc.id,\r\n+});\r\n \r\n-\r\n-\r\n /**\r\n  * Buscar agendamentos do usuário\r\n  * @param {string} userId\r\n  * @returns {Promise<Array>} Lista de agendamentos\r\n@@ -24,17 +31,10 @@\n   const agendamentosRef = collection(db, 'agendamentos');\r\n   const q = query(agendamentosRef, where('uid', '==', userId));\r\n   const querySnapshot = await getDocs(q);\r\n \r\n-  const agendamentos = [];\r\n-  querySnapshot.forEach((doc) => {\r\n-    agendamentos.push({ ...doc.data(), id: doc.id });\r\n-  });\r\n-\r\n-  return agendamentos.map((agenda) => ({\r\n-    ...agenda,\r\n-    status: agenda.status || 'Pendente',\r\n-  }));\r\n+  // Usa a função auxiliar para transformar os documentos e evitar repetição de código.\r\n+  return querySnapshot.docs.map(transformDocToAgendamento);\r\n }\r\n \r\n /**\r\n  * Listener em tempo real\r\n@@ -46,19 +46,12 @@\n export function listenAgendamentos(userId, onData, onError) {\r\n   const agendamentosRef = collection(db, 'agendamentos');\r\n   const q = query(agendamentosRef, where('uid', '==', userId));\r\n \r\n-  return onSnapshot(q, \r\n+  return onSnapshot(q,\r\n     (querySnapshot) => { // Callback de sucesso\r\n-      const agendamentos = [];\r\n-      querySnapshot.forEach((doc) => {\r\n-        agendamentos.push({ ...doc.data(), id: doc.id });\r\n-      });\r\n-      const mappedData = agendamentos.map((agenda) => ({\r\n-          ...agenda,\r\n-          status: agenda.status || 'Pendente',\r\n-      }));\r\n-      onData(mappedData);\r\n+      const agendamentos = querySnapshot.docs.map(transformDocToAgendamento);\r\n+      onData(agendamentos);\r\n     },\r\n     (error) => { // Callback de erro\r\n       console.error(\"Erro no listener de agendamentos:\", error);\r\n       onError(error);\r\n@@ -70,9 +63,15 @@\n  * Criar agendamento\r\n  * @param {Object} agendamento\r\n  */\r\n export async function createAgendamento(agendamento) {\r\n-  return await addDoc(collection(db, 'agendamentos'), agendamento);\r\n+  // Garante que todo novo agendamento tenha um status padrão e data de criação.\r\n+  const newAgendamento = {\r\n+    ...agendamento,\r\n+    status: agendamento.status || 'Pendente',\r\n+    createdAt: new Date(),\r\n+  };\r\n+  return await addDoc(collection(db, 'agendamentos'), newAgendamento);\r\n }\r\n \r\n /**\r\n  * Atualizar agendamento\r\n@@ -91,4 +90,22 @@\n export async function deleteAgendamento(id) {\r\n   const agendamentoRef = doc(db, 'agendamentos', id);\r\n   return await deleteDoc(agendamentoRef);\r\n }\r\n+\r\n+/**\r\n+ * Salva o aceite dos termos de uso de um usuário.\r\n+ * @param {string} uid - O ID do usuário.\r\n+ * @param {object} termsData - Os dados do aceite dos termos.\r\n+ */\r\n+export const saveTermsAcceptance = async (uid, termsData) => {\r\n+  if (!uid) {\r\n+    throw new Error(\"UID do usuário é necessário para salvar o aceite dos termos.\");\r\n+  }\r\n+  try {\r\n+    const termsRef = doc(db, 'user_terms', uid);\r\n+    await setDoc(termsRef, termsData);\r\n+  } catch (error) {\r\n+    console.error(\"Erro ao salvar aceite dos termos: \", error);\r\n+    throw new Error(\"Não foi possível salvar o aceite dos termos.\");\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1759370793590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n   doc,\r\n   getDocs,\r\n   onSnapshot,\r\n   query,\r\n-  setDoc,\r\n   updateDoc,\r\n   where\r\n } from 'firebase/firestore';\r\n import { db } from './firebaseConnection';\r\n@@ -90,22 +89,4 @@\n export async function deleteAgendamento(id) {\r\n   const agendamentoRef = doc(db, 'agendamentos', id);\r\n   return await deleteDoc(agendamentoRef);\r\n }\r\n-\r\n-/**\r\n- * Salva o aceite dos termos de uso de um usuário.\r\n- * @param {string} uid - O ID do usuário.\r\n- * @param {object} termsData - Os dados do aceite dos termos.\r\n- */\r\n-export const saveTermsAcceptance = async (uid, termsData) => {\r\n-  if (!uid) {\r\n-    throw new Error(\"UID do usuário é necessário para salvar o aceite dos termos.\");\r\n-  }\r\n-  try {\r\n-    const termsRef = doc(db, 'user_terms', uid);\r\n-    await setDoc(termsRef, termsData);\r\n-  } catch (error) {\r\n-    console.error(\"Erro ao salvar aceite dos termos: \", error);\r\n-    throw new Error(\"Não foi possível salvar o aceite dos termos.\");\r\n-  }\r\n-};\r\n"
                }
            ],
            "date": 1758507796240,
            "name": "Commit-0",
            "content": "import { db } from './firebaseConnection';\r\nimport {\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  getDocs,\r\n  query,\r\n  where,\r\n  onSnapshot,\r\n  getDoc\r\n} from 'firebase/firestore';\r\n\r\n/**\r\n * Transforma um documento do Firestore em um objeto de agendamento, garantindo o ID.\r\n * @param {import('firebase/firestore').DocumentSnapshot} doc - O documento do Firestore.\r\n * @returns {object} O objeto de agendamento com id.\r\n */\r\nconst transformDocToAgendamento = (doc) => ({\r\n  ...doc.data(),\r\n  id: doc.id,\r\n});\r\n\r\n\r\n\r\n/**\r\n * Buscar agendamentos do usuário\r\n * @param {string} userId\r\n * @returns {Promise<Array>} Lista de agendamentos\r\n */\r\nexport async function getAgendamentos(userId) {\r\n  const agendamentosRef = collection(db, 'agendamentos');\r\n  const q = query(agendamentosRef, where('uid', '==', userId));\r\n  const querySnapshot = await getDocs(q);\r\n\r\n  const agendamentos = [];\r\n  querySnapshot.forEach((doc) => {\r\n    agendamentos.push({ ...doc.data(), id: doc.id });\r\n  });\r\n\r\n  return agendamentos.map((agenda) => ({\r\n    ...agenda,\r\n    status: agenda.status || 'Pendente',\r\n  }));\r\n  // Usa a função auxiliar para transformar os documentos e evitar repetição de código.\r\n  return querySnapshot.docs.map(transformDocToAgendamento);\r\n}\r\n\r\n/**\r\n * Listener em tempo real\r\n * @param {string} userId\r\n * @param {function} onData - Callback para sucesso, recebe a lista de agendamentos.\r\n * @param {function} onError - Callback para falha.\r\n * @returns {function} unsubscribe\r\n */\r\nexport function listenAgendamentos(userId, onData, onError) {\r\n  const agendamentosRef = collection(db, 'agendamentos');\r\n  const q = query(agendamentosRef, where('uid', '==', userId));\r\n\r\n  return onSnapshot(q, \r\n    (querySnapshot) => { // Callback de sucesso\r\n      const agendamentos = [];\r\n      querySnapshot.forEach((doc) => {\r\n        agendamentos.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      const mappedData = agendamentos.map((agenda) => ({\r\n          ...agenda,\r\n          status: agenda.status || 'Pendente',\r\n      }));\r\n      onData(mappedData);\r\n      const agendamentos = querySnapshot.docs.map(transformDocToAgendamento);\r\n      onData(agendamentos);\r\n    },\r\n    (error) => { // Callback de erro\r\n      console.error(\"Erro no listener de agendamentos:\", error);\r\n      onError(error);\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Criar agendamento\r\n * @param {Object} agendamento\r\n */\r\nexport async function createAgendamento(agendamento) {\r\n  return await addDoc(collection(db, 'agendamentos'), agendamento);\r\n  // Garante que todo novo agendamento tenha um status padrão e data de criação.\r\n  const newAgendamento = {\r\n    ...agendamento,\r\n    status: agendamento.status || 'Pendente',\r\n    createdAt: new Date(),\r\n  };\r\n  return await addDoc(collection(db, 'agendamentos'), newAgendamento);\r\n}\r\n\r\n/**\r\n * Atualizar agendamento\r\n * @param {string} id\r\n * @param {Object} data\r\n */\r\nexport async function updateAgendamento(id, data) {\r\n  const agendamentoRef = doc(db, 'agendamentos', id);\r\n  return await updateDoc(agendamentoRef, data);\r\n}\r\n\r\n/**\r\n * Deletar agendamento\r\n * @param {string} id\r\n */\r\nexport async function deleteAgendamento(id) {\r\n  const agendamentoRef = doc(db, 'agendamentos', id);\r\n  return await deleteDoc(agendamentoRef);\r\n}\r\n"
        }
    ]
}