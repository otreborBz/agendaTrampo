{
    "sourceFile": "src/services/firebase/userService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759371026216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759371026216,
            "name": "Commit-0",
            "content": "import { createUserWithEmailAndPassword, sendPasswordResetEmail, signInWithEmailAndPassword, signOut } from 'firebase/auth';\r\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\r\nimport { auth, db } from './firebaseConnection';\r\n\r\n/**\r\n * Autentica um usuário com email e senha e busca seus dados no Firestore.\r\n * @param {string} email - O email do usuário.\r\n * @param {string} password - A senha do usuário.\r\n * @returns {Promise<object>} - Retorna o objeto do usuário do Firestore.\r\n * @throws {Error} - Lança um erro com uma mensagem amigável em caso de falha.\r\n */\r\nexport async function signInUser(email, password) {\r\n  try {\r\n    const { user } = await signInWithEmailAndPassword(auth, email, password);\r\n    const userDocRef = doc(db, \"users\", user.uid);\r\n    const userSnapshot = await getDoc(userDocRef);\r\n\r\n    if (userSnapshot.exists()) {\r\n        return userSnapshot.data();\r\n    } else {\r\n        // O usuário existe na autenticação, mas não no Firestore.\r\n        // Isso pode acontecer se o documento foi excluído manualmente.\r\n        // Vamos recriar o documento do usuário para evitar o bloqueio do login.\r\n        console.warn(`Recriando documento para o usuário ${user.uid} que não foi encontrado no Firestore.`);\r\n        const userData = { uid: user.uid, email: user.email, name: user.email, createdAt: new Date() };\r\n        await setDoc(userDocRef, userData);\r\n        return userData;\r\n    }\r\n  } catch (error) {\r\n    if ([\"auth/user-not-found\", \"auth/wrong-password\", \"auth/invalid-credential\"].includes(error.code)) {\r\n      throw new Error(\"E-mail ou senha inválidos.\");\r\n    }\r\n    console.error(\"Erro em signInUser:\", error);\r\n    throw new Error(\"Não foi possível fazer login. Tente novamente.\");\r\n  }\r\n}\r\n\r\n/**\r\n * Cria um novo usuário com email/senha e salva seus dados no Firestore.\r\n * @param {string} name - O nome do usuário.\r\n * @param {string} email - O email do usuário.\r\n * @param {string} password - A senha do usuário.\r\n * @returns {Promise<object>} - Retorna o objeto do usuário criado em caso de sucesso.\r\n * @throws {Error} - Lança um erro com uma mensagem amigável em caso de falha.\r\n */\r\nexport async function signUpUser(name, email, password) {\r\n  try {\r\n    const { user } = await createUserWithEmailAndPassword(auth, email, password);\r\n    const userDocRef = doc(db, \"users\", user.uid);\r\n    await setDoc(userDocRef, { uid: user.uid, name, email, createdAt: new Date() });\r\n    return user;\r\n  } catch (error) {\r\n    if (error.code === \"auth/email-already-in-use\") {\r\n      throw new Error(\"Este e-mail já está em uso.\");\r\n    } else if (error.code === \"auth/weak-password\") {\r\n      throw new Error(\"A senha deve ter pelo menos 6 caracteres.\");\r\n    } else if (error.code === \"auth/invalid-email\") {\r\n      throw new Error(\"O e-mail informado não é válido.\");\r\n    }\r\n    console.error(\"Erro em signUpUser:\", error);\r\n    throw new Error(\"Não foi possível criar o usuário. Tente novamente.\");\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Desloga o usuário atual do Firebase.\r\n * @returns {Promise<void>}\r\n * @throws {Error} Lança um erro se não for possível fazer logout.\r\n */\r\nexport async function logoutUser() {\r\n  try {\r\n    await signOut(auth);\r\n  } catch (error) {\r\n    console.error(\"Erro em logoutUser:\", error);\r\n    throw new Error(\"Não foi possível fazer logout. Tente novamente.\");\r\n  }\r\n}\r\n\r\n/** \r\nVerifica senha inserida se tem minuscula, maiuscula, numero e minimo de 8 caracter\r\n@returns {boolean}\r\n@throws {Error}\r\n**/ \r\nexport function validarSenha(senha) {\r\n  const regexSenha = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\r\n  if (!regexSenha.test(senha)) {\r\n    throw new Error(\"A senha deve conter pelo menos 8 caracteres, uma letra maiúscula, uma letra minúscula e um número.\");\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} email \r\n * @returns { boolean}\r\n * @throws {Error}\r\n */\r\nexport async function redefinirSenha(email){\r\n  try {\r\n    await sendPasswordResetEmail(auth, email);\r\n    return true;\r\n  } catch (error) {\r\n    throw new Error(\"Não foi possível redefinir a senha. Verifique o email digitado e tente novamente.\");\r\n  }\r\n}\r\n"
        }
    ]
}