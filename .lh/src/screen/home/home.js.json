{
    "sourceFile": "src/screen/home/home.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1758642211676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758642217990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import CustomAlert from '../../components/customAlert/CustomAlert';\r\n import ListAgenda from '../../components/listAgenda/listAgenda';\r\n import { AuthContext } from '../../contexts/auth';\r\n import { listenAgendamentos, updateAgendamento } from '../../services/firebase/firestoreService';\r\n-import { colors } from '../../themes/colors/colors';\r\n+import { colors } from '../../themes/colors/Colors';\r\n import styles from './style';\r\n \r\n // Configuração do calendário para padrão brasileiro\r\n LocaleConfig.locales['pt-br'] = {\r\n"
                },
                {
                    "date": 1758647061443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import ListAgenda from '../../components/listAgenda/listAgenda';\r\n import { AuthContext } from '../../contexts/auth';\r\n import { listenAgendamentos, updateAgendamento } from '../../services/firebase/firestoreService';\r\n import { colors } from '../../themes/colors/Colors';\r\n-import styles from './styles/';\r\n+import styles from './styles';\r\n \r\n // Configuração do calendário para padrão brasileiro\r\n LocaleConfig.locales['pt-br'] = {\r\n   monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\r\n"
                }
            ],
            "date": 1758642211676,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState, useContext, useMemo } from 'react';\r\nimport { View, Text, FlatList, TouchableOpacity, Modal, TextInput, ScrollView, Platform, Alert, KeyboardAvoidingView, ActivityIndicator } from 'react-native';\r\nimport { Calendar, LocaleConfig } from 'react-native-calendars';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nimport { AuthContext } from '../../contexts/auth';\r\nimport ListAgenda from '../../components/listAgenda/listAgenda';\r\nimport styles from './style';\r\nimport CustomAlert from '../../components/customAlert/CustomAlert';\r\nimport { colors } from '../../themes/colors/colors';\r\nimport { buscarCep } from '../../services/apiViaCep/apiViaCepService';\r\nimport { listenAgendamentos, createAgendamento, updateAgendamento } from '../../services/firebase/firestoreService';\r\n\r\n// Configuração do calendário para padrão brasileiro\r\nLocaleConfig.locales['pt-br'] = {\r\n  monthNames: ['Janeiro','Fevereiro','Março','Abril','Maio','Junho','Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'],\r\n  monthNamesShort: ['Jan','Fev','Mar','Abr','Mai','Jun','Jul','Ago','Set','Nov','Dez'],\r\n  dayNames: ['Domingo','Segunda','Terça','Quarta','Quinta','Sexta','Sábado'],\r\n  dayNamesShort: ['Dom','Seg','Ter','Qua','Qui','Sex','Sáb'],\r\n  today: 'Hoje'\r\n};\r\nLocaleConfig.defaultLocale = 'pt-br';\r\n\r\nexport default function Home() {\r\n\r\n  const navigation = useNavigation();\r\n  const { user } = useContext(AuthContext);\r\n\r\n  // Estados\r\n  const [agendamentos, setAgendamentos] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\r\n  const [listLoading, setListLoading] = useState(true); // Estado de loading para a lista\r\n  const [listError, setListError] = useState(null); // Estado para erro da lista\r\n  const [alertVisible, setAlertVisible] = useState(false);\r\n  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n  const [statusFiltro, setStatusFiltro] = useState('Todos');\r\n\r\n  // Serviços\r\n  const [servicosExistentes, setServicosExistentes] = useState([]);\r\n\r\n  const [showCalendar, setShowCalendar] = useState(true);\r\n  const [showFullCalendar, setShowFullCalendar] = useState(false);\r\n\r\n  // Carrega serviços do AsyncStorage\r\n  useEffect(() => {\r\n    const loadServicos = async () => {\r\n      const saved = await AsyncStorage.getItem('@servicos');\r\n      if (saved) setServicosExistentes(JSON.parse(saved));\r\n    };\r\n    loadServicos();\r\n  }, []);\r\n\r\n  // Listener de agendamentos em tempo real\r\n  useEffect(() => {\r\n    if (!user?.uid) return;\r\n    setListLoading(true);\r\n    setListError(null);\r\n\r\n    const unsubscribe = listenAgendamentos(\r\n      user.uid,\r\n      (data) => { // onData\r\n        setAgendamentos(data);\r\n        setListLoading(false);\r\n      },\r\n      (error) => { // onError\r\n        setListError('Não foi possível carregar os agendamentos. Verifique sua conexão e tente novamente.');\r\n        setListLoading(false);\r\n        setAlertInfo({ title: 'Erro', message: 'Falha ao buscar dados.' });\r\n        setAlertVisible(true);\r\n      }\r\n    );\r\n    return () => unsubscribe();\r\n  }, [user]);\r\n\r\n  // Atualizar status\r\n const updateStatus = async (id, novoStatus) => {\r\n  // Atualiza o estado localmente de forma otimista\r\n  setAgendamentos(prevAgendamentos =>\r\n    prevAgendamentos.map(a => (a.id === id ? { ...a, status: novoStatus } : a))\r\n  );\r\n\r\n  try {\r\n      await updateAgendamento(id, { status: novoStatus });\r\n    } catch (error) {\r\n      console.error(\"Erro ao atualizar status:\", error);\r\n      Alert.alert(\"Erro\", \"Não foi possível atualizar o status. Tente novamente.\");\r\n\r\n      // Reverte a mudança no estado local em caso de erro\r\n      setAgendamentos(prevAgendamentos =>\r\n        prevAgendamentos.map(a => (a.id === id ? { ...a, status: a.status } : a))\r\n      );\r\n    }\r\n  };\r\n\r\n  // Função para lidar com a exclusão vinda do componente filho\r\n  const handleDeleteResult = (id, result) => {\r\n    // Mostra o alerta de sucesso ou erro\r\n    setAlertInfo({\r\n      title: result.success ? \"Sucesso\" : \"Erro\",\r\n      message: result.message,\r\n    });\r\n    setAlertVisible(true);\r\n\r\n    // Se a exclusão foi bem-sucedida, remove o item da lista local\r\n    if (result.success) {\r\n      setAgendamentos(prev => prev.filter(a => a.id !== id));\r\n    }\r\n  };\r\n\r\n  // Função para obter dias da semana\r\n  const getWeekDays = (dateStr) => {\r\n    const diasSemana = ['Dom','Seg','Ter','Qua','Qui','Sex','Sáb'];\r\n    // Constrói a data de forma segura para evitar problemas de fuso horário\r\n    const [year, month, day] = dateStr.split('-').map(Number);\r\n    const date = new Date(year, month - 1, day);\r\n\r\n    const sunday = new Date(date); sunday.setDate(date.getDate() - date.getDay());\r\n    return Array.from({length: 7}).map((_, i) => {\r\n      const d = new Date(sunday); d.setDate(sunday.getDate() + i);\r\n      return { label: diasSemana[i], date: formatDateLocal(d), day: d.getDate() };\r\n    });\r\n  };\r\n\r\n  const formatDateLocal = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth()+1).padStart(2,'0');\r\n    const day = String(date.getDate()).padStart(2,'0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const getLocalDateString = () => formatDateLocal(new Date());\r\n\r\n  // Marcação calendário\r\n  const markedDates = useMemo(() => {\r\n    const marks = {};\r\n    agendamentos.forEach(agenda => {\r\n      let dataStr = '';\r\n      if (agenda.dataHora) dataStr = typeof agenda.dataHora === 'string' ? agenda.dataHora.split('T')[0] : agenda.dataHora.toDate().toISOString().split('T')[0];\r\n      if (!dataStr) return;\r\n      if (!marks[dataStr]) marks[dataStr] = { count: 0, status: {} };\r\n      marks[dataStr].count++; marks[dataStr].status[agenda.status] = (marks[dataStr].status[agenda.status] || 0) + 1;\r\n    });\r\n    const calendarMarks = {};\r\n    Object.keys(marks).forEach(date => {\r\n      let bg = colors.success;\r\n      if (marks[date].status['Cancelado']) bg = colors.error;\r\n      else if (marks[date].status['Pendente']) bg = colors.warning;\r\n      calendarMarks[date] = { selected: date===selectedDate, selectedColor: date===selectedDate?colors.secondary:bg, count: marks[date].count };\r\n    });\r\n    if (!calendarMarks[selectedDate]) calendarMarks[selectedDate] = { selected: true, selectedColor: colors.secondary };\r\n    return calendarMarks;\r\n  }, [agendamentos, selectedDate]);\r\n\r\n  return (\r\n  <View style={styles.container}>\r\n      <CustomAlert\r\n        visible={alertVisible}\r\n        title={alertInfo.title}\r\n        message={alertInfo.message}\r\n        onClose={() => setAlertVisible(false)}\r\n      />\r\n\r\n      {/* Calendário sempre visível */}\r\n      {showCalendar && (\r\n        <View style={{ backgroundColor: colors.white, borderRadius: 10, padding: 4, marginTop: 0, marginBottom: 4, elevation: 2, shadowColor: '#000', shadowOffset: { width: 0, height: 1 }, shadowOpacity: 0.06, shadowRadius: 2 }}>\r\n          {showFullCalendar ? (\r\n            <>\r\n              <View style={{ flexDirection: 'row', justifyContent: 'flex-end', alignItems: 'center', marginBottom: 4, marginTop: 4, paddingHorizontal: 2 }}>\r\n                <TouchableOpacity onPress={() => setShowFullCalendar(false)} style={{ flexDirection: 'row', alignItems: 'center', padding: 4 }}>\r\n                  <Ionicons name=\"chevron-up-outline\" size={18} color={colors.secondary} />\r\n                  <Text style={{ color: colors.secondary, fontSize: 13, marginLeft: 2 }}>Toque para recolher o calendário</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n              <Calendar\r\n                onDayPress={day => {\r\n                 setSelectedDate(day.dateString); \r\n                }}\r\n                markingType={'multi-dot'}\r\n                markedDates={markedDates}\r\n                style={{ borderRadius: 10, minWidth: 300 }}\r\n                theme={{\r\n                  todayTextColor: colors.primary,\r\n                  selectedDayBackgroundColor: colors.secondary,\r\n                  arrowColor: colors.secondary,\r\n                  textDayFontSize: 15,\r\n                  textMonthFontSize: 18,\r\n                  textDayHeaderFontSize: 13,\r\n                }}\r\n                firstDay={0}\r\n                dayComponent={({ date, state }) => {\r\n                  const dateStr = date.dateString;\r\n                  const marking = markedDates[dateStr] || {};\r\n                  const isSelected = marking.selected;\r\n                  const bgColor = isSelected ? colors.secondary : marking.selectedColor || 'transparent';\r\n                  const textColor = isSelected ? colors.white : colors.text;\r\n                  const fontWeight = isSelected ? 'bold' : 'normal';\r\n                  return (\r\n                    <TouchableOpacity\r\n                      style={{ alignItems: 'center', justifyContent: 'center', width: 34, height: 34, borderRadius: 17, backgroundColor: bgColor }}\r\n                      onPress={() => setSelectedDate(dateStr)}\r\n                      activeOpacity={0.7}\r\n                    >\r\n                      <Text style={{ color: textColor, fontWeight, fontSize: 14 }}>{date.day}</Text>\r\n                      {marking && marking.count > 0 && (\r\n                        <View style={{ position: 'absolute', bottom: 1, right: 1, backgroundColor: colors.primary, borderRadius: 7, paddingHorizontal: 3, minWidth: 13 }}>\r\n                          <Text style={{ color: colors.white, fontSize: 9, textAlign: 'center' }}>{marking.count}</Text>\r\n                        </View>\r\n                      )}\r\n                    </TouchableOpacity>\r\n                  );\r\n                }}\r\n              />\r\n            </>\r\n          ) : (\r\n            <TouchableOpacity onPress={() => setShowFullCalendar(true)} activeOpacity={0.8} style={{paddingVertical: 2}}>\r\n              <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', paddingHorizontal: 2 }}>\r\n                {getWeekDays(selectedDate).map((d, idx) => {\r\n                  const isSelected = d.date === selectedDate;\r\n                  return (\r\n                    <TouchableOpacity\r\n                      key={d.date}\r\n                      onPress={() => setSelectedDate(d.date)}\r\n                      style={{ alignItems: 'center', flex: 1 }}\r\n                      activeOpacity={0.7}\r\n                    >\r\n                      <Text style={{ color: colors.text, fontSize: 12, marginBottom: 2 }}>{d.label}</Text>\r\n                      <View style={{\r\n                        width: 32, height: 32, borderRadius: 16,\r\n                        backgroundColor: isSelected ? colors.secondary : 'transparent',\r\n                        alignItems: 'center', justifyContent: 'center',\r\n                        borderWidth: isSelected ? 0 : 1, borderColor: '#eee',\r\n                      }}>\r\n                        <Text style={{ color: isSelected ? colors.white : colors.text, fontWeight: isSelected ? 'bold' : 'normal', fontSize: 15 }}>{d.day}</Text>\r\n                      </View>\r\n                    </TouchableOpacity>\r\n                  );\r\n                })}\r\n              </View>\r\n              <Text style={{ textAlign: 'center', color: colors.secondary, marginTop: 10, marginBottom: 10, fontSize: 12 }}>Toque para expandir o calendário</Text>\r\n            </TouchableOpacity>\r\n          )}\r\n        </View>\r\n      )}\r\n\r\n      {listLoading ? (\r\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n          <ActivityIndicator size=\"large\" color={colors.primary} />\r\n          <Text style={{ marginTop: 10, color: colors.text }}>Carregando agendamentos...</Text>\r\n        </View>\r\n      ) : (\r\n        <FlatList\r\n          key={'_'}\r\n          numColumns={2}\r\n          data={agendamentos.filter(item => {\r\n            if (!item.dataHora) return false;\r\n            const data = typeof item.dataHora === 'string' ? item.dataHora : (item.dataHora.toDate ? item.dataHora.toDate().toISOString() : '');\r\n            const matchDate = data.startsWith(selectedDate);\r\n            const matchStatus = statusFiltro === 'Todos' ? true : (item.status === statusFiltro);\r\n            return matchDate && matchStatus;\r\n          })}\r\n          keyExtractor={(item) => item.id}\r\n          renderItem={({ item }) => (\r\n            <ListAgenda \r\n              data={{...item, onDelete: handleDeleteResult}}\r\n              onUpdateStatus={updateStatus} \r\n            />\r\n          )}\r\n          showsVerticalScrollIndicator={false}\r\n          contentContainerStyle={{ paddingBottom: 20, flexGrow: 1 }}\r\n          ListEmptyComponent={\r\n            <View style={styles.emptyContainer}>\r\n              <Ionicons name={listError ? \"cloud-offline-outline\" : \"calendar-outline\"} size={60} color=\"#ccc\" />\r\n              <Text style={styles.emptyText}>{listError || 'Nenhum agendamento para este dia'}</Text>\r\n            </View>\r\n          }\r\n        />\r\n      )}\r\n\r\n      {/* Botão de ação flutuante para adicionar agendamento */}\r\n      <TouchableOpacity\r\n        style={styles.fab}\r\n        activeOpacity={0.8}\r\n        onPress={() => navigation.navigate('Agendar')}\r\n      >\r\n        <Ionicons name=\"add\" size={32} color={colors.white} />\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n"
        }
    ]
}