{
    "sourceFile": "src/screen/login/login.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1758642763716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758642769828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+import { useEffect, useRef, useState, useContext } from 'react';\r\n+import { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\n+import styles from './style';\r\n+import { AuthContext } from '../../contexts/auth';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+\r\n+export default function Login() {\r\n+  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n+  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Animação de entrada\r\n+  useEffect(() => {\r\n+    Animated.parallel([\r\n+      Animated.timing(fadeAnim, {\r\n+        toValue: 1,\r\n+        duration: 1000,\r\n+        useNativeDriver: true,\r\n+      }),\r\n+      Animated.timing(translateYAnim, {\r\n+        toValue: 0,\r\n+        duration: 1000,\r\n+        useNativeDriver: true,\r\n+      }),\r\n+    ]).start();\r\n+  }, []);\r\n+\r\n+  // Abrir tela de registro\r\n+  function openRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function goToChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView \r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Animated.Image \r\n+        source={require('../../image/logo/iconName.png')} \r\n+        style={[\r\n+          styles.logo,\r\n+          {\r\n+            opacity: fadeAnim,\r\n+            transform: [{ translateY: translateYAnim }]\r\n+          }\r\n+        ]}\r\n+      />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword} \r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity \r\n+          style={styles.button} \r\n+          activeOpacity={0.8} \r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity \r\n+        style={styles.buttonRecoveryPassword} \r\n+        activeOpacity={0.7} \r\n+        onPress={goToChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+     \r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758642791218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+import { useEffect, useRef, useState, useContext } from 'react';\r\n+import { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\n+import styles from './styles';\r\n+import { AuthContext } from '../../contexts/auth';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+\r\n+export default function Login() {\r\n+  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n+  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Animação de entrada\r\n+  useEffect(() => {\r\n+    Animated.parallel([\r\n+      Animated.timing(fadeAnim, {\r\n+        toValue: 1,\r\n+        duration: 1000,\r\n+        useNativeDriver: true,\r\n+      }),\r\n+      Animated.timing(translateYAnim, {\r\n+        toValue: 0,\r\n+        duration: 1000,\r\n+        useNativeDriver: true,\r\n+      }),\r\n+    ]).start();\r\n+  }, []);\r\n+\r\n+  // Abrir tela de registro\r\n+  function openRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function goToChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView \r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Animated.Image \r\n+        source={require('../../image/logo/iconName.png')} \r\n+        style={[\r\n+          styles.logo,\r\n+          {\r\n+            opacity: fadeAnim,\r\n+            transform: [{ translateY: translateYAnim }]\r\n+          }\r\n+        ]}\r\n+      />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword} \r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity \r\n+          style={styles.button} \r\n+          activeOpacity={0.8} \r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity \r\n+        style={styles.buttonRecoveryPassword} \r\n+        activeOpacity={0.7} \r\n+        onPress={goToChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+     \r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758642842622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,185 +24,10 @@\n \r\n \r\n \r\n   // Animação de entrada\r\n-  useEffect(() => {\r\n-    Animated.parallel([\r\n-      Animated.timing(fadeAnim, {\r\n-        toValue: 1,\r\n-        duration: 1000,\r\n-        useNativeDriver: true,\r\n-      }),\r\n-      Animated.timing(translateYAnim, {\r\n-        toValue: 0,\r\n-        duration: 1000,\r\n-        useNativeDriver: true,\r\n-      }),\r\n-    ]).start();\r\n-  }, []);\r\n \r\n-  // Abrir tela de registro\r\n-  function openRegister() {\r\n-    navigation.navigate('Register');\r\n-  }\r\n \r\n-  // Abrir tela de recuperação de senha\r\n-  function goToChangeRecord() {\r\n-    navigation.navigate('ChangeRecord');\r\n-  }\r\n-\r\n-  // Função de login\r\n-  async function handleLogin() {\r\n-    if (email === '' || password === '') {\r\n-      setAlertInfo({\r\n-        title: 'Atenção',\r\n-        message: 'Por favor, preencha todos os campos.',\r\n-      });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const result = await signIn(email, password);\r\n-      if (!result.success) {\r\n-        setAlertInfo({\r\n-          title: 'Erro no Login',\r\n-          message: result.message,\r\n-        });\r\n-\r\n-      }\r\n-    } catch (error) {\r\n-      setAlertInfo({\r\n-        title: 'Erro',\r\n-        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n-      });\r\n-      setAlertVisible(true);\r\n-    }\r\n-  }\r\n-\r\n-  return (\r\n-    <KeyboardAvoidingView \r\n-      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      style={styles.container}\r\n-    >\r\n-      <CustomAlert\r\n-        visible={alertVisible}\r\n-        title={alertInfo.title}\r\n-        message={alertInfo.message}\r\n-        onClose={() => setAlertVisible(false)}\r\n-      />\r\n-      <Animated.Image \r\n-        source={require('../../image/logo/iconName.png')} \r\n-        style={[\r\n-          styles.logo,\r\n-          {\r\n-            opacity: fadeAnim,\r\n-            transform: [{ translateY: translateYAnim }]\r\n-          }\r\n-        ]}\r\n-      />\r\n-\r\n-      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n-\r\n-      <View style={styles.inputContainer}>\r\n-        <TextInput\r\n-          value={email}\r\n-          onChangeText={setEmail}\r\n-          placeholder='Email'\r\n-          style={styles.textInput}\r\n-          keyboardType=\"email-address\"\r\n-          autoCapitalize=\"none\"\r\n-          autoCorrect={false}\r\n-        />\r\n-        <View style={styles.passwordContainer}>\r\n-          <TextInput\r\n-            value={password}\r\n-            onChangeText={setPassword} \r\n-            placeholder='Senha'\r\n-            style={styles.passwordInput}\r\n-            secureTextEntry={!isPasswordVisible}\r\n-            autoCapitalize=\"none\"\r\n-          />\r\n-          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n-            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n-          </Pressable>\r\n-        </View>\r\n-        <TouchableOpacity \r\n-          style={styles.button} \r\n-          activeOpacity={0.8} \r\n-          onPress={handleLogin}\r\n-        >\r\n-          {loading ? (\r\n-            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n-          ) : (\r\n-            <Text style={styles.textButton}>Entrar</Text>\r\n-          )}\r\n-        </TouchableOpacity>\r\n-      </View>\r\n-\r\n-      <TouchableOpacity \r\n-        style={styles.buttonRecoveryPassword} \r\n-        activeOpacity={0.7} \r\n-        onPress={goToChangeRecord}\r\n-      >\r\n-        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n-      </TouchableOpacity>\r\n-     \r\n-      <View style={styles.buttonContainer}>\r\n-        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n-        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n-          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n-        </TouchableOpacity>\r\n-      </View>\r\n-\r\n-      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n-        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n-      </TouchableOpacity>\r\n-    </KeyboardAvoidingView>\r\n-  );\r\n-}\r\n-import { useEffect, useRef, useState, useContext } from 'react';\r\n-import { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\n-import styles from './style';\r\n-import { AuthContext } from '../../contexts/auth';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-import CustomAlert from '../../components/customAlert/CustomAlert';\r\n-import Icon from 'react-native-vector-icons/Feather';\r\n-\r\n-export default function Login() {\r\n-  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n-  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n-\r\n-  const navigation = useNavigation();\r\n-\r\n-  const { signIn, loading } = useContext(AuthContext);\r\n-\r\n-  const [email, setEmail] = useState('');\r\n-  const [password, setPassword] = useState('');\r\n-  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n-\r\n-  // Estado para o alerta customizado\r\n-  const [alertVisible, setAlertVisible] = useState(false);\r\n-  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n-\r\n-\r\n-\r\n-  // Animação de entrada\r\n-  useEffect(() => {\r\n-    Animated.parallel([\r\n-      Animated.timing(fadeAnim, {\r\n-        toValue: 1,\r\n-        duration: 1000,\r\n-        useNativeDriver: true,\r\n-      }),\r\n-      Animated.timing(translateYAnim, {\r\n-        toValue: 0,\r\n-        duration: 1000,\r\n-        useNativeDriver: true,\r\n-      }),\r\n-    ]).start();\r\n-  }, []);\r\n-\r\n   // Abrir tela de registro\r\n   function openRegister() {\r\n     navigation.navigate('Register');\r\n   }\r\n@@ -321,167 +146,4 @@\n       </TouchableOpacity>\r\n     </KeyboardAvoidingView>\r\n   );\r\n }\r\n-import React, { useEffect, useRef, useState, useContext } from 'react';\r\n-import { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\n-import styles from './style';\r\n-import { AuthContext } from '../../contexts/auth';\r\n-import { useNavigation } from '@react-navigation/native';\r\n-import CustomAlert from '../../components/customAlert/CustomAlert';\r\n-import Icon from 'react-native-vector-icons/Feather';\r\n-\r\n-\r\n-export default function Login() {\r\n-  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n-  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n-\r\n-  const navigation = useNavigation();\r\n-\r\n-  const { signIn, loading } = useContext(AuthContext);\r\n-\r\n-  const [email, setEmail] = useState('');\r\n-  const [password, setPassword] = useState('');\r\n-  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n-\r\n-  // Estado para o alerta customizado\r\n-  const [alertVisible, setAlertVisible] = useState(false);\r\n-  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n-\r\n-\r\n-\r\n-  // Animação de entrada\r\n-  useEffect(() => {\r\n-    Animated.parallel([\r\n-      Animated.timing(fadeAnim, {\r\n-        toValue: 1,\r\n-        duration: 1000,\r\n-        useNativeDriver: true,\r\n-      }),\r\n-      Animated.timing(translateYAnim, {\r\n-        toValue: 0,\r\n-        duration: 1000,\r\n-        useNativeDriver: true,\r\n-      }),\r\n-    ]).start();\r\n-  }, []);\r\n-\r\n-  // Abrir tela de registro\r\n-  function openRegister() {\r\n-    navigation.navigate('Register');\r\n-  }\r\n-\r\n-  // Abrir tela de recuperação de senha\r\n-  function goToChangeRecord() {\r\n-    navigation.navigate('ChangeRecord');\r\n-  }\r\n-\r\n-  // Função de login\r\n-  async function handleLogin() {\r\n-    if (email === '' || password === '') {\r\n-      setAlertInfo({\r\n-        title: 'Atenção',\r\n-        message: 'Por favor, preencha todos os campos.',\r\n-      });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const result = await signIn(email, password);\r\n-      if (!result.success) {\r\n-        setAlertInfo({\r\n-          title: 'Erro no Login',\r\n-          message: result.message,\r\n-        });\r\n-\r\n-      }\r\n-    } catch (error) {\r\n-      setAlertInfo({\r\n-        title: 'Erro',\r\n-        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n-      });\r\n-      setAlertVisible(true);\r\n-    }\r\n-  }\r\n-\r\n-  return (\r\n-    <KeyboardAvoidingView \r\n-      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n-      style={styles.container}\r\n-    >\r\n-      <CustomAlert\r\n-        visible={alertVisible}\r\n-        title={alertInfo.title}\r\n-        message={alertInfo.message}\r\n-        onClose={() => setAlertVisible(false)}\r\n-      />\r\n-      <Animated.Image \r\n-        source={require('../../image/logo/iconName.png')} \r\n-        style={[\r\n-          styles.logo,\r\n-          {\r\n-            opacity: fadeAnim,\r\n-            transform: [{ translateY: translateYAnim }]\r\n-          }\r\n-        ]}\r\n-      />\r\n-\r\n-      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n-\r\n-      <View style={styles.inputContainer}>\r\n-        <TextInput\r\n-          value={email}\r\n-          onChangeText={setEmail}\r\n-          placeholder='Email'\r\n-          style={styles.textInput}\r\n-          keyboardType=\"email-address\"\r\n-          autoCapitalize=\"none\"\r\n-          autoCorrect={false}\r\n-        />\r\n-        <View style={styles.passwordContainer}>\r\n-          <TextInput\r\n-            value={password}\r\n-            onChangeText={setPassword} \r\n-            placeholder='Senha'\r\n-            style={styles.passwordInput}\r\n-            secureTextEntry={!isPasswordVisible}\r\n-            autoCapitalize=\"none\"\r\n-          />\r\n-          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n-            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n-          </Pressable>\r\n-        </View>\r\n-        <TouchableOpacity \r\n-          style={styles.button} \r\n-          activeOpacity={0.8} \r\n-          onPress={handleLogin}\r\n-        >\r\n-          {loading ? (\r\n-            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n-          ) : (\r\n-            <Text style={styles.textButton}>Entrar</Text>\r\n-          )}\r\n-        </TouchableOpacity>\r\n-      </View>\r\n-\r\n-      <TouchableOpacity \r\n-        style={styles.buttonRecoveryPassword} \r\n-        activeOpacity={0.7} \r\n-        onPress={goToChangeRecord}\r\n-      >\r\n-        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n-      </TouchableOpacity>\r\n-     \r\n-      <View style={styles.buttonContainer}>\r\n-        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n-        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n-          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n-        </TouchableOpacity>\r\n-      </View>\r\n-\r\n-      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n-        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n-      </TouchableOpacity>\r\n-    </KeyboardAvoidingView>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1758642855731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { useEffect, useRef, useState, useContext } from 'react';\r\n+import { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\n+import styles from './styles';\r\n+import { AuthContext } from '../../contexts/auth';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+\r\n+export default function Login() {\r\n+  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n+  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Abrir tela de registro\r\n+  function openRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function goToChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView \r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Image \r\n+        source={require('../../image/logo/iconName.png')} \r\n+        style={[\r\n+          styles.logo,\r\n+          {\r\n+            opacity: fadeAnim,\r\n+            transform: [{ translateY: translateYAnim }]\r\n+          }\r\n+        ]}\r\n+      />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword} \r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity \r\n+          style={styles.button} \r\n+          activeOpacity={0.8} \r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity \r\n+        style={styles.buttonRecoveryPassword} \r\n+        activeOpacity={0.7} \r\n+        onPress={goToChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+     \r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758642861260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+import { useEffect, useRef, useState, useContext } from 'react';\r\n+import { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\n+import styles from './styles';\r\n+import { AuthContext } from '../../contexts/auth';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+\r\n+export default function Login() {\r\n+  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n+  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Abrir tela de registro\r\n+  function openRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function goToChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView \r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Image \r\n+        source={require('../../image/logo/iconName.png')} \r\n+        style={[\r\n+          styles.logo,\r\n+  \r\n+        ]}\r\n+      />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword} \r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity \r\n+          style={styles.button} \r\n+          activeOpacity={0.8} \r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity \r\n+        style={styles.buttonRecoveryPassword} \r\n+        activeOpacity={0.7} \r\n+        onPress={goToChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+     \r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758642868284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import { useEffect, useRef, useState, useContext } from 'react';\r\n+import { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\n+import styles from './styles';\r\n+import { AuthContext } from '../../contexts/auth';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+\r\n+export default function Login() {\r\n+  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n+  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Abrir tela de registro\r\n+  function openRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function goToChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView \r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Image \r\n+        source={require('../../image/logo/iconName.png')} \r\n+        style={[ styles.logo, ]}\r\n+      />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword} \r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity \r\n+          style={styles.button} \r\n+          activeOpacity={0.8} \r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity \r\n+        style={styles.buttonRecoveryPassword} \r\n+        activeOpacity={0.7} \r\n+        onPress={goToChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+     \r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758642873575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import { useEffect, useRef, useState, useContext } from 'react';\r\n+import { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\n+import styles from './styles';\r\n+import { AuthContext } from '../../contexts/auth';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+\r\n+export default function Login() {\r\n+  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n+  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Abrir tela de registro\r\n+  function openRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function goToChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView \r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Image \r\n+        source={require('../../image/logo/iconName.png')} \r\n+        style={styles.logo}\r\n+      />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword} \r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity \r\n+          style={styles.button} \r\n+          activeOpacity={0.8} \r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity \r\n+        style={styles.buttonRecoveryPassword} \r\n+        activeOpacity={0.7} \r\n+        onPress={goToChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+     \r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758642880206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,10 +73,9 @@\n         title={alertInfo.title}\r\n         message={alertInfo.message}\r\n         onClose={() => setAlertVisible(false)}\r\n       />\r\n-      <Image source={require('../../image/logo/iconName.png')} \r\n-        style={styles.logo}\r\n+      <Image source={require('../../image/logo/iconName.png')} style={styles.logo}\r\n       />\r\n \r\n       <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n \r\n"
                },
                {
                    "date": 1758642890658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+import { useEffect, useRef, useState, useContext } from 'react';\r\n+import { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\n+import styles from './styles';\r\n+import { AuthContext } from '../../contexts/auth';\r\n+import { useNavigation } from '@react-navigation/native';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+\r\n+export default function Login() {\r\n+  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n+  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Abrir tela de registro\r\n+  function openRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function goToChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView \r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Image source={require('../../')} style={styles.logo}/>\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword} \r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity \r\n+          style={styles.button} \r\n+          activeOpacity={0.8} \r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity \r\n+        style={styles.buttonRecoveryPassword} \r\n+        activeOpacity={0.7} \r\n+        onPress={goToChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+     \r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                }
            ],
            "date": 1758642763716,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState, useContext } from 'react';\r\nimport { View, Text, TextInput, Image, TouchableOpacity, KeyboardAvoidingView, Platform, Animated, ActivityIndicator, Pressable } from 'react-native';\r\nimport styles from './style';\r\nimport { AuthContext } from '../../contexts/auth';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport CustomAlert from '../../components/customAlert/CustomAlert';\r\nimport Icon from 'react-native-vector-icons/Feather';\r\n\r\n\r\nexport default function Login() {\r\n  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n  const translateYAnim = useRef(new Animated.Value(50)).current;\r\n\r\n  const navigation = useNavigation();\r\n\r\n  const { signIn, loading } = useContext(AuthContext);\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n\r\n  // Estado para o alerta customizado\r\n  const [alertVisible, setAlertVisible] = useState(false);\r\n  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n\r\n\r\n\r\n  // Animação de entrada\r\n  useEffect(() => {\r\n    Animated.parallel([\r\n      Animated.timing(fadeAnim, {\r\n        toValue: 1,\r\n        duration: 1000,\r\n        useNativeDriver: true,\r\n      }),\r\n      Animated.timing(translateYAnim, {\r\n        toValue: 0,\r\n        duration: 1000,\r\n        useNativeDriver: true,\r\n      }),\r\n    ]).start();\r\n  }, []);\r\n\r\n  // Abrir tela de registro\r\n  function openRegister() {\r\n    navigation.navigate('Register');\r\n  }\r\n\r\n  // Abrir tela de recuperação de senha\r\n  function goToChangeRecord() {\r\n    navigation.navigate('ChangeRecord');\r\n  }\r\n\r\n  // Função de login\r\n  async function handleLogin() {\r\n    if (email === '' || password === '') {\r\n      setAlertInfo({\r\n        title: 'Atenção',\r\n        message: 'Por favor, preencha todos os campos.',\r\n      });\r\n      setAlertVisible(true);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await signIn(email, password);\r\n      if (!result.success) {\r\n        setAlertInfo({\r\n          title: 'Erro no Login',\r\n          message: result.message,\r\n        });\r\n\r\n      }\r\n    } catch (error) {\r\n      setAlertInfo({\r\n        title: 'Erro',\r\n        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n      });\r\n      setAlertVisible(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <KeyboardAvoidingView \r\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n      style={styles.container}\r\n    >\r\n      <CustomAlert\r\n        visible={alertVisible}\r\n        title={alertInfo.title}\r\n        message={alertInfo.message}\r\n        onClose={() => setAlertVisible(false)}\r\n      />\r\n      <Animated.Image \r\n        source={require('../../image/logo/iconName.png')} \r\n        style={[\r\n          styles.logo,\r\n          {\r\n            opacity: fadeAnim,\r\n            transform: [{ translateY: translateYAnim }]\r\n          }\r\n        ]}\r\n      />\r\n\r\n      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n\r\n      <View style={styles.inputContainer}>\r\n        <TextInput\r\n          value={email}\r\n          onChangeText={setEmail}\r\n          placeholder='Email'\r\n          style={styles.textInput}\r\n          keyboardType=\"email-address\"\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n        />\r\n        <View style={styles.passwordContainer}>\r\n          <TextInput\r\n            value={password}\r\n            onChangeText={setPassword} \r\n            placeholder='Senha'\r\n            style={styles.passwordInput}\r\n            secureTextEntry={!isPasswordVisible}\r\n            autoCapitalize=\"none\"\r\n          />\r\n          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n          </Pressable>\r\n        </View>\r\n        <TouchableOpacity \r\n          style={styles.button} \r\n          activeOpacity={0.8} \r\n          onPress={handleLogin}\r\n        >\r\n          {loading ? (\r\n            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n          ) : (\r\n            <Text style={styles.textButton}>Entrar</Text>\r\n          )}\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      <TouchableOpacity \r\n        style={styles.buttonRecoveryPassword} \r\n        activeOpacity={0.7} \r\n        onPress={goToChangeRecord}\r\n      >\r\n        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n      </TouchableOpacity>\r\n     \r\n      <View style={styles.buttonContainer}>\r\n        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n        <TouchableOpacity activeOpacity={0.7} onPress={openRegister}>\r\n          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n      </TouchableOpacity>\r\n    </KeyboardAvoidingView>\r\n  );\r\n}\r\n"
        }
    ]
}