{
    "sourceFile": "src/components/listAgenda/listAgenda.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1758642211675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758642218031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   TouchableOpacity,\r\n   View\r\n } from \"react-native\";\r\n import { db } from '../../services/firebase/firebaseConnection';\r\n-import { colors } from \"../../themes/colors/colors\";\r\n+import { colors } from \"../../themes/colors/Colors\";\r\n \r\n import { deleteAgendamento } from \"../../services/firebase/firestoreService\";\r\n import ActionAlert from '../actionAlert/actionAlert';\r\n import actionSheetStyles from './actionSheetStyles';\r\n"
                },
                {
                    "date": 1758724827424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,14 @@\n   const date = typeof field === \"string\" ? new Date(field) : field;\r\n   return date.toLocaleString(\"pt-BR\", { day: \"2-digit\", month: \"2-digit\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\" });\r\n }\r\n \r\n+// --- Formatação de hora ---\r\n+function formatTime(field) {\r\n+  if (!field) return \"\";\r\n+  const date = typeof field === \"string\" ? new Date(field) : field;\r\n+  return date.toLocaleString(\"pt-BR\", { hour: \"2-digit\", minute: \"2-digit\" });\r\n+}\r\n // --- Componente ListAgenda ---\r\n export default function ListAgenda({ data }) {\r\n   const item = data;\r\n   const navigation = useNavigation();\r\n@@ -84,8 +90,9 @@\n   const fadeAnim = useRef(new Animated.Value(0)).current;\r\n   const [status, setStatus] = useState(item.status || \"pendente\");\r\n \r\n   const formattedDateTimeValue = formatDateTime(item.dataHora);\r\n+  const formattedTimeValue = formatTime(item.dataHora);\r\n \r\n   const [actionAlertVisible, setActionAlertVisible] = useState(false);\r\n   const [actionAlertInfo, setActionAlertInfo] = useState({ title: '', message: '' });\r\n \r\n@@ -177,31 +184,24 @@\n         onPressIn={handlePressIn}\r\n         onPressOut={handlePressOut}\r\n       >\r\n         <View style={styles.cardContent}>\r\n-          <View style={styles.cardHeader}>\r\n-            <View style={styles.cardInfoRow}>\r\n-              <Ionicons name=\"person-outline\" size={16} color='#555' style={styles.cardIcon} />\r\n-              <Text style={styles.cardNome} numberOfLines={1}>{item.nomeCliente}</Text>\r\n+          <View style={styles.cardMainInfo}>\r\n+            <Text style={styles.cardTime}>{formattedTimeValue}</Text>\r\n+            <View style={styles.cardTextContainer}>\r\n+              <View style={styles.cardInfoRow}>\r\n+                <Ionicons name=\"person-outline\" size={16} color='#555' style={styles.cardIcon} />\r\n+                <Text style={styles.cardNome} numberOfLines={1}>{item.nomeCliente}</Text>\r\n+              </View>\r\n+              <View style={styles.cardInfoRow}>\r\n+                <Ionicons name=\"briefcase-outline\" size={14} color=\"#555\" style={styles.cardIcon} />\r\n+                <Text style={styles.cardServico} numberOfLines={1}>{item.servico || 'Serviço não especificado'}</Text>\r\n+              </View>\r\n             </View>\r\n-            <TouchableOpacity onPress={showActionSheet} style={styles.moreButton} hitSlop={15}>\r\n-              <Ionicons name=\"ellipsis-vertical\" size={18} color={colors.text} />\r\n-            </TouchableOpacity>\r\n           </View>\r\n-          <View style={styles.cardInfoRow}>\r\n-            <Ionicons name=\"briefcase-outline\" size={14} color=\"#555\" style={styles.cardIcon} />\r\n-            <Text style={styles.cardServico} numberOfLines={1}>{item.servico || 'Serviço não especificado'}</Text>\r\n+          <TouchableOpacity onPress={showActionSheet} style={styles.moreButton} hitSlop={15}>\r\n+            <Ionicons name=\"ellipsis-vertical\" size={18} color={colors.text} />\r\n           </View>\r\n-          <View>\r\n-            <View style={styles.cardInfoRow}>\r\n-              <Ionicons name=\"calendar-outline\" size={14} color=\"#555\" style={styles.cardIcon} />\r\n-              <Text style={styles.cardDataHora}>{formattedDateTimeValue}</Text>\r\n-            </View>\r\n-            <View style={styles.cardFooter}>\r\n-              <Ionicons name=\"information-circle-outline\" size={14} color={statusStyle.color} />\r\n-              <Text style={[styles.statusText, statusStyle]}>{status}</Text>\r\n-            </View>\r\n-          </View>\r\n         </View>\r\n       </AnimatedTouchable>\r\n \r\n       {/* Modal Detalhes */}\r\n"
                }
            ],
            "date": 1758642211675,
            "name": "Commit-0",
            "content": "import { useState, useRef } from \"react\";\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { doc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../../services/firebase/firebaseConnection';\r\nimport {\r\n  View,\r\n  Text,\r\n  Pressable,\r\n  ScrollView,\r\n  Modal,\r\n  Animated,\r\n  TouchableOpacity,\r\n  Alert,\r\n  Platform,\r\n  ActionSheetIOS,\r\n  StyleSheet,\r\n  Pressable as RNPressable,\r\n} from \"react-native\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { colors } from \"../../themes/colors/colors\";\r\n\r\nimport ActionAlert from '../actionAlert/actionAlert';\r\nimport { deleteAgendamento } from \"../../services/firebase/firestoreService\";\r\nimport actionSheetStyles  from './actionSheetStyles'\r\nimport styles from \"./style\";\r\n\r\n// Criando AnimatedTouchable para animação de scale\r\nconst AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);\r\n\r\n// --- Custom Action Sheet ---\r\nconst CustomActionSheet = ({ visible, onClose, options, title }) => {\r\n  if (!visible) return null;\r\n\r\n  return (\r\n    <Modal transparent animationType=\"fade\" visible={visible} onRequestClose={onClose}>\r\n      <RNPressable style={actionSheetStyles.overlay} onPress={onClose}>\r\n        <RNPressable style={actionSheetStyles.container} onPress={() => {}}>\r\n          <Text style={actionSheetStyles.title}>{title || 'Opções'}</Text>\r\n          <Text style={actionSheetStyles.message}>O que você deseja fazer com este agendamento?</Text>\r\n\r\n          <View style={actionSheetStyles.buttonContainer}>\r\n            {options.map((option, index) => (\r\n              <TouchableOpacity\r\n                key={index}\r\n                style={[\r\n                  actionSheetStyles.button,\r\n                  option.style === 'destructive' ? actionSheetStyles.destructiveButton : actionSheetStyles.primaryButton\r\n                ]}\r\n                onPress={() => { onClose(); option.onPress(); }}\r\n              >\r\n                <Ionicons\r\n                  name={option.icon}\r\n                  size={20}\r\n                  style={[option.style === 'destructive' ? actionSheetStyles.destructiveButtonText : actionSheetStyles.primaryButtonText]}\r\n                />\r\n                <Text style={[option.style === 'destructive' ? actionSheetStyles.destructiveButtonText : actionSheetStyles.primaryButtonText]}>\r\n                  {option.text}\r\n                </Text>\r\n              </TouchableOpacity>\r\n            ))}\r\n          </View>\r\n          <TouchableOpacity style={actionSheetStyles.cancelButton} onPress={onClose}>\r\n            <Text style={actionSheetStyles.cancelText}>Cancelar</Text>\r\n          </TouchableOpacity>\r\n        </RNPressable>\r\n      </RNPressable>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n// --- Formatação de data ---\r\nfunction formatDateTime(field) {\r\n  if (!field) return \"\";\r\n  const date = typeof field === \"string\" ? new Date(field) : field;\r\n  return date.toLocaleString(\"pt-BR\", { day: \"2-digit\", month: \"2-digit\", year: \"numeric\", hour: \"2-digit\", minute: \"2-digit\" });\r\n}\r\n\r\n// --- Componente ListAgenda ---\r\nexport default function ListAgenda({ data }) {\r\n  const item = data;\r\n  const navigation = useNavigation();\r\n  const [visible, setVisible] = useState(false);\r\n  const [actionSheetVisible, setActionSheetVisible] = useState(false);\r\n  const [scaleValue] = useState(new Animated.Value(1));\r\n  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n  const [status, setStatus] = useState(item.status || \"pendente\");\r\n\r\n  const formattedDateTimeValue = formatDateTime(item.dataHora);\r\n\r\n  const [actionAlertVisible, setActionAlertVisible] = useState(false);\r\n  const [actionAlertInfo, setActionAlertInfo] = useState({ title: '', message: '' });\r\n\r\n\r\n  // Define o estilo do card com base no status\r\n  let cardStyle = {};\r\n  let statusStyle = {};\r\n  const lowerCaseStatus = status.toLowerCase();\r\n\r\n  if (lowerCaseStatus === 'pendente') {\r\n    statusStyle = styles.statusPendente;\r\n    cardStyle = { borderRightColor: colors.statusPendenteColor || \"#FFA000\", backgroundColor: statusStyle.backgroundColor };\r\n  } else if (lowerCaseStatus === 'concluido' || lowerCaseStatus === 'concluído') {\r\n    statusStyle = styles.statusConfirmado;\r\n    cardStyle = { borderRightColor: colors.statusConfirmadoColor || \"#388E3C\", backgroundColor: statusStyle.backgroundColor };\r\n  } else if (lowerCaseStatus === 'cancelado') {\r\n    statusStyle = styles.statusCancelado;\r\n    cardStyle = { borderRightColor: colors.statusCanceladoColor || \"#D32F2F\", backgroundColor: statusStyle.backgroundColor };\r\n  }\r\n\r\n  // Map de cores da barra lateral\r\n  const statusColorMap = {\r\n    pendente: colors.statusPendenteColor || \"#FFA000\",\r\n    concluido: colors.statusConfirmadoColor || \"#388E3C\",\r\n    cancelado: colors.statusCanceladoColor || \"#D32F2F\"\r\n  };\r\n\r\n  const openDetail = () => {\r\n    setVisible(true);\r\n    Animated.timing(fadeAnim, { toValue: 1, duration: 300, useNativeDriver: true }).start();\r\n  };\r\n\r\n  const closeDetail = () => {\r\n    Animated.timing(fadeAnim, { toValue: 0, duration: 300, useNativeDriver: true }).start(() => setVisible(false));\r\n  };\r\n\r\n  const handlePressIn = () => Animated.spring(scaleValue, { toValue: 0.98, useNativeDriver: true }).start();\r\n  const handlePressOut = () => Animated.spring(scaleValue, { toValue: 1, friction: 3, tension: 40, useNativeDriver: true }).start();\r\n\r\n  const showActionSheet = () => {\r\n    if (Platform.OS === \"ios\") {\r\n      ActionSheetIOS.showActionSheetWithOptions(\r\n        { options: [\"Cancelar\", \"Editar\", \"Excluir\"], destructiveButtonIndex: 2, cancelButtonIndex: 0 },\r\n        (buttonIndex) => { if (buttonIndex === 1) handleEdit(); else if (buttonIndex === 2) handleDelete(); }\r\n      );\r\n    } else setActionSheetVisible(true);\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    closeDetail();\r\n    // Cria um novo objeto apenas com os dados necessários e serializáveis\r\n    const agendamentoParaNavegar = {\r\n      id: item.id,\r\n      nomeCliente: item.nomeCliente,\r\n      telefone: item.telefone,\r\n      servico: item.servico,\r\n      valor: item.valor,\r\n      status: item.status,\r\n      endereco: item.endereco,\r\n      dataHora: item.dataHora?.toDate ? item.dataHora.toDate().toISOString() : item.dataHora,\r\n    };\r\n\r\n\r\n    navigation.navigate('Agendar', { agendamento: agendamentoParaNavegar });\r\n  };\r\n\r\n\r\n  //Deleta um agendamento\r\n  const handleDelete = () => {\r\n    if (visible) closeDetail(); // Fecha o modal de detalhes se estiver aberto\r\n    setActionAlertInfo({ \r\n      title: \"Excluir Agendamento\", \r\n      message: `Deseja excluir o agendamento de ${item.nomeCliente}?` \r\n    });\r\n    setActionAlertVisible(true);\r\n  };\r\n\r\n  const actionSheetOptions = [\r\n    { text: \"Editar\", onPress: handleEdit, icon: 'create-outline' },\r\n    { text: \"Excluir\", onPress: handleDelete, style: \"destructive\", icon: 'trash-outline' },\r\n  ];\r\n\r\n  return (\r\n    <View style={styles.gridItemContainer}>\r\n      {/* Card */}\r\n      <AnimatedTouchable\r\n        style={[styles.card, cardStyle, { transform: [{ scale: scaleValue }] }]}\r\n        onPress={openDetail}\r\n        onPressIn={handlePressIn}\r\n        onPressOut={handlePressOut}\r\n      >\r\n        <View style={styles.cardContent}>\r\n          <View style={styles.cardHeader}>\r\n            <View style={styles.cardInfoRow}>\r\n              <Ionicons name=\"person-outline\" size={16} color='#555' style={styles.cardIcon} />\r\n              <Text style={styles.cardNome} numberOfLines={1}>{item.nomeCliente}</Text>\r\n            </View>\r\n            <TouchableOpacity onPress={showActionSheet} style={styles.moreButton} hitSlop={15}>\r\n              <Ionicons name=\"ellipsis-vertical\" size={18} color={colors.text} />\r\n            </TouchableOpacity>\r\n          </View>\r\n          <View style={styles.cardInfoRow}>\r\n            <Ionicons name=\"briefcase-outline\" size={14} color=\"#555\" style={styles.cardIcon} />\r\n            <Text style={styles.cardServico} numberOfLines={1}>{item.servico || 'Serviço não especificado'}</Text>\r\n          </View>\r\n          <View>\r\n            <View style={styles.cardInfoRow}>\r\n              <Ionicons name=\"calendar-outline\" size={14} color=\"#555\" style={styles.cardIcon} />\r\n              <Text style={styles.cardDataHora}>{formattedDateTimeValue}</Text>\r\n            </View>\r\n            <View style={styles.cardFooter}>\r\n              <Ionicons name=\"information-circle-outline\" size={14} color={statusStyle.color}  />\r\n              <Text style={[styles.statusText, statusStyle]}>{status}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </AnimatedTouchable>\r\n\r\n      {/* Modal Detalhes */}\r\n      <Modal animationType=\"fade\" transparent visible={visible} onRequestClose={closeDetail}>\r\n        <Animated.View style={[styles.modalOverlay, { opacity: fadeAnim }]}>\r\n          <Pressable style={styles.modalOverlayPressable}>\r\n            <Animated.View style={styles.modalContentCentered}>\r\n              <View style={styles.modalHeader}>\r\n                <Text style={styles.modalHeaderText}>Detalhes do Agendamento</Text>\r\n                <Pressable onPress={closeDetail} style={styles.closeButton} hitSlop={10}>\r\n                  <Ionicons name=\"close\" size={24} color=\"#fff\" />\r\n                </Pressable>\r\n              </View>\r\n\r\n              <ScrollView style={styles.modalScrollView} showsVerticalScrollIndicator={false}>\r\n                {/* Informações Pessoais */}\r\n                <View style={styles.infoSection}>\r\n                  <Text style={styles.sectionTitle}>Informações Pessoais</Text>\r\n                  <View style={styles.infoRow}>\r\n                    <Ionicons name=\"person-outline\" size={20} color={colors.border} style={styles.infoIcon} />\r\n                    <Text style={styles.infoText}>{item.nomeCliente}</Text>\r\n                  </View>\r\n                  <View style={styles.infoRow}>\r\n                    <Ionicons name=\"call-outline\" size={20} color={colors.border} style={styles.infoIcon} />\r\n                    <Text style={styles.infoText}>{item.telefone}</Text>\r\n                  </View>\r\n                </View>\r\n\r\n                {/* Detalhes Agendamento */}\r\n                <View style={styles.infoSection}>\r\n                  <Text style={styles.sectionTitle}>Detalhes do Agendamento</Text>\r\n                  <View style={styles.infoRow}>\r\n                    <Ionicons name=\"calendar-outline\" size={20} color={colors.border} style={styles.infoIcon} />\r\n                    <Text style={styles.infoText}>{formattedDateTimeValue}</Text>\r\n                  </View>\r\n                  <View style={styles.infoRow}>\r\n                    <Ionicons name=\"briefcase-outline\" size={20} color={colors.border} style={styles.infoIcon} />\r\n                    <Text style={styles.infoText}>{item.servico}</Text>\r\n                  </View>\r\n                  <View style={styles.infoRow}>\r\n                    <Ionicons name=\"cash-outline\" size={20} color={colors.border} style={styles.infoIcon} />\r\n                    <Text style={styles.infoText}>R$ {item.valor}</Text>\r\n                  </View>\r\n\r\n                  {/* Status clicável */}\r\n                  <View style={{ marginTop: 10 }}>\r\n                    <Text style={{ fontSize: 14, fontWeight: \"600\", marginBottom: 6 }}>Status:</Text>\r\n                    <View style={{ flexDirection: \"row\", gap:5 }}>\r\n                      {[\"Concluido\", \"Pendente\", \"Cancelado\"].map((s) => (\r\n                        <Pressable\r\n                          key={s}\r\n                          onPress={async () => {\r\n                            setStatus(s);\r\n                            try {\r\n                              await updateDoc(doc(db, \"agendamentos\", item.id), { status: s });\r\n                              if (typeof data.onUpdateStatus === \"function\") data.onUpdateStatus(item.id, s);\r\n                            } catch (e) {\r\n                              Alert.alert(\"Erro\", \"Não foi possível atualizar o status.\");\r\n                            }\r\n                          }}\r\n                          style={[\r\n                            styles.statusBadge,\r\n                            s === \"Concluido\" && styles.statusConfirmado,\r\n                            s === \"Pendente\" && styles.statusPendente,\r\n                            s === \"Cancelado\" && styles.statusCancelado,\r\n                            s === status && { borderWidth: 2, borderColor: colors.primary },\r\n                          ]}\r\n                        >\r\n                          <Text style={styles.statusText}>{s}</Text>\r\n                        </Pressable>\r\n                      ))}\r\n                    </View>\r\n                  </View>\r\n                </View>\r\n\r\n                {/* Localização */}\r\n                <View style={styles.infoSection}>\r\n                  <Text style={styles.sectionTitle}>Localização</Text>\r\n                  <View style={styles.infoRow}>\r\n                    <Ionicons name=\"location-outline\" size={20} color={colors.border} style={styles.infoIcon} />\r\n                    <Text style={styles.infoText}>\r\n                      {item.endereco\r\n                        ? `${item.endereco.rua}, ${item.endereco.numero} - ${item.endereco.cidade}/${item.endereco.estado}`\r\n                        : \"Endereço não cadastrado\"}\r\n                    </Text>\r\n                  </View>\r\n                </View>\r\n              </ScrollView>\r\n            </Animated.View>\r\n          </Pressable>\r\n        </Animated.View>\r\n      </Modal>\r\n\r\n      {/* ActionSheet */}\r\n      <CustomActionSheet\r\n        visible={actionSheetVisible}\r\n        onClose={() => setActionSheetVisible(false)}\r\n        options={actionSheetOptions}\r\n        title=\"Ações do Agendamento\"\r\n      />\r\n\r\n      {/* Alerta de Ação (Excluir) */}\r\n      <ActionAlert\r\n        visible={actionAlertVisible}\r\n        title={actionAlertInfo.title}\r\n        message={actionAlertInfo.message}\r\n        onClose={() => setActionAlertVisible(false)}\r\n        actions={[\r\n          { text: \"Cancelar\", onPress: () => setActionAlertVisible(false) },\r\n          { text: \"Excluir\", destructive: true, onPress: async () => {\r\n              setActionAlertVisible(false);\r\n              try {\r\n                await deleteAgendamento(item.id);                \r\n                if (typeof data.onDelete === 'function') {\r\n                  // Passa o ID e o resultado de sucesso para o componente pai\r\n                  data.onDelete(item.id, { success: true, message: \"Agendamento excluído com sucesso!\" });\r\n                }\r\n              } catch (error) {\r\n                if (typeof data.onDelete === 'function') {\r\n                  // Passa o ID e o resultado de erro para o componente pai\r\n                  data.onDelete(item.id, { success: false, message: \"Não foi possível excluir o agendamento.\" });\r\n                }\r\n              }\r\n          }},\r\n        ]}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n"
        }
    ]
}