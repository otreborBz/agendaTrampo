{
    "sourceFile": "src/contexts/Auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1759336090436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759336132361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n   \r\n   }\r\n \r\n   // Deslogar o usuario\r\n-  async function logout() {\r\n-    console\r\n+  async function signOut() {\r\n+    console.log(\"Deslogando usuário...\");\r\n     try {\r\n       await logoutUser();\r\n       return { success: true };\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1759336182933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { createContext, useState, useEffect } from \"react\";\r\n-import { collection, query, where, getDocs, doc, getDoc, setDoc } from \"firebase/firestore\";\r\n+import {  doc, getDoc, setDoc } from \"firebase/firestore\";\r\n import { db, auth } from \"../services/firebase/firebaseConnection\";\r\n import {signOut as firebaseSignOut, onAuthStateChanged} from \"firebase/auth\";\r\n \r\n \r\n"
                },
                {
                    "date": 1759336188223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { createContext, useState, useEffect } from \"react\";\r\n-import {  doc, getDoc, setDoc } from \"firebase/firestore\";\r\n+import { doc, getDoc } from \"firebase/firestore\";\r\n import { db, auth } from \"../services/firebase/firebaseConnection\";\r\n import {signOut as firebaseSignOut, onAuthStateChanged} from \"firebase/auth\";\r\n \r\n \r\n"
                },
                {
                    "date": 1759336221950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \r\n function AuthProvider({ children }) {\r\n   const [user, setUser] = useState(null);\r\n   const [loading, setLoading] = useState(false);\r\n-  const [initializing, setInitializing] = useState(true); // controla o primeiro carregamento\r\n+  const [initializing, setInitializing] = useState(true);\r\n \r\n   // Detecta automaticamente se o usuário está logado\r\n   useEffect(() => {\r\n     const unsubscribe = onAuthStateChanged(auth, async currentUser => {\r\n"
                },
                {
                    "date": 1759336264593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,8 @@\n \r\n   // Cadastro novo usuário\r\n   async function signUp(name, email, password) {\r\n     setLoading(true);\r\n-    //Valida a senha\r\n     if( !validarSenha(password)){\r\n       return { success: false, message: \"A senha deve conter pelo menos 8 caracteres, uma letra maiúscula, uma letra minúscula e um número.\" };\r\n     }\r\n \r\n"
                },
                {
                    "date": 1759336326438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+import React, { createContext, useState, useEffect } from \"react\";\r\n+import { doc, getDoc } from \"firebase/firestore\";\r\n+import { db, auth } from \"../services/firebase/firebaseConnection\";\r\n+import {signOut as firebaseSignOut, onAuthStateChanged} from \"firebase/auth\";\r\n+\r\n+\r\n+import { signInUser, signUpUser, logoutUser, validarSenha } from \"../services/firebase/userService\";\r\n+\r\n+export const AuthContext = createContext({});\r\n+\r\n+function AuthProvider({ children }) {\r\n+  const [user, setUser] = useState(null);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [initializing, setInitializing] = useState(true); // controla o primeiro carregamento\r\n+\r\n+  // Detecta automaticamente se o usuário está logado\r\n+  useEffect(() => {\r\n+    const unsubscribe = onAuthStateChanged(auth, async currentUser => {\r\n+      setInitializing(true);\r\n+      if (currentUser) {\r\n+        setLoading(true);\r\n+\r\n+        // Busca dados do usuário no Firestore\r\n+        const docRef = doc(db, \"users\", currentUser.uid);\r\n+        const snapshot = await getDoc(docRef);\r\n+        if (snapshot.exists()) {\r\n+          setUser(snapshot.data());\r\n+        }\r\n+\r\n+        setLoading(false);\r\n+      } else {\r\n+        setUser(null);\r\n+      }\r\n+      setInitializing(false);\r\n+    });\r\n+\r\n+    return () => unsubscribe(); \r\n+  }, []);\r\n+\r\n+  // Logar o usuario\r\n+  async function signIn(email, password) {\r\n+    setLoading(true);\r\n+    try {\r\n+      await signInUser(email, password);\r\n+      return { success: true };\r\n+    } catch (error) {\r\n+      return { success: false, message: error.message };\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  }\r\n+\r\n+  // Cadastro novo usuário\r\n+  async function signUp(name, email, password) {\r\n+    setLoading(true);\r\n+    //Valida a senha\r\n+    if( !validarSenha(password)){\r\n+      return { success: false, message: \"A senha deve conter pelo menos 8 caracteres, uma letra maiúscula, uma letra minúscula e um número.\" };\r\n+    }\r\n+\r\n+    try {\r\n+      await signUpUser(name, email, password);\r\n+      return { success: true };\r\n+    } catch (error) {\r\n+      return { success: false, message: error.message };\r\n+    } finally {\r\n+      setLoading(false);  \r\n+    }\r\n+  \r\n+  }\r\n+\r\n+  // Deslogar o usuario\r\n+  async function signOut() {\r\n+    console.log(\"Deslogando usuário...\");\r\n+    try {\r\n+      await logoutUser();\r\n+      return { success: true };\r\n+    } catch (error) {\r\n+      console.log(\"Erro ao deslogar:\", error);\r\n+      return { success: false, message: error.message };\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <AuthContext.Provider\r\n+      value={{\r\n+        user,\r\n+        loading,\r\n+        initializing,\r\n+        signUp,\r\n+        signIn,\r\n+        logout\r\n+      }}\r\n+    >\r\n+      {children}\r\n+    </AuthContext.Provider>\r\n+  );\r\n+}\r\n+\r\n+export default AuthProvider;\r\n"
                },
                {
                    "date": 1759336332589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { createContext, useState, useEffect } from \"react\";\r\n-import { doc, getDoc } from \"firebase/firestore\";\r\n+import { collection, query, where, getDocs, doc, getDoc, setDoc } from \"firebase/firestore\";\r\n import { db, auth } from \"../services/firebase/firebaseConnection\";\r\n import {signOut as firebaseSignOut, onAuthStateChanged} from \"firebase/auth\";\r\n \r\n \r\n@@ -69,9 +69,9 @@\n   \r\n   }\r\n \r\n   // Deslogar o usuario\r\n-  async function signOut() {\r\n+  async function logout() {\r\n     console.log(\"Deslogando usuário...\");\r\n     try {\r\n       await logoutUser();\r\n       return { success: true };\r\n@@ -97,103 +97,4 @@\n   );\r\n }\r\n \r\n export default AuthProvider;\r\n-import React, { createContext, useState, useEffect } from \"react\";\r\n-import { doc, getDoc } from \"firebase/firestore\";\r\n-import { db, auth } from \"../services/firebase/firebaseConnection\";\r\n-import {signOut as firebaseSignOut, onAuthStateChanged} from \"firebase/auth\";\r\n-\r\n-\r\n-import { signInUser, signUpUser, logoutUser, validarSenha } from \"../services/firebase/userService\";\r\n-\r\n-export const AuthContext = createContext({});\r\n-\r\n-function AuthProvider({ children }) {\r\n-  const [user, setUser] = useState(null);\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [initializing, setInitializing] = useState(true);\r\n-\r\n-  // Detecta automaticamente se o usuário está logado\r\n-  useEffect(() => {\r\n-    const unsubscribe = onAuthStateChanged(auth, async currentUser => {\r\n-      setInitializing(true);\r\n-      if (currentUser) {\r\n-        setLoading(true);\r\n-\r\n-        // Busca dados do usuário no Firestore\r\n-        const docRef = doc(db, \"users\", currentUser.uid);\r\n-        const snapshot = await getDoc(docRef);\r\n-        if (snapshot.exists()) {\r\n-          setUser(snapshot.data());\r\n-        }\r\n-\r\n-        setLoading(false);\r\n-      } else {\r\n-        setUser(null);\r\n-      }\r\n-      setInitializing(false);\r\n-    });\r\n-\r\n-    return () => unsubscribe(); \r\n-  }, []);\r\n-\r\n-  // Logar o usuario\r\n-  async function signIn(email, password) {\r\n-    setLoading(true);\r\n-    try {\r\n-      await signInUser(email, password);\r\n-      return { success: true };\r\n-    } catch (error) {\r\n-      return { success: false, message: error.message };\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  }\r\n-\r\n-  // Cadastro novo usuário\r\n-  async function signUp(name, email, password) {\r\n-    setLoading(true);\r\n-    if( !validarSenha(password)){\r\n-      return { success: false, message: \"A senha deve conter pelo menos 8 caracteres, uma letra maiúscula, uma letra minúscula e um número.\" };\r\n-    }\r\n-\r\n-    try {\r\n-      await signUpUser(name, email, password);\r\n-      return { success: true };\r\n-    } catch (error) {\r\n-      return { success: false, message: error.message };\r\n-    } finally {\r\n-      setLoading(false);  \r\n-    }\r\n-  \r\n-  }\r\n-\r\n-  // Deslogar o usuario\r\n-  async function signOut() {\r\n-    console.log(\"Deslogando usuário...\");\r\n-    try {\r\n-      await logoutUser();\r\n-      return { success: true };\r\n-    } catch (error) {\r\n-      console.log(\"Erro ao deslogar:\", error);\r\n-      return { success: false, message: error.message };\r\n-    }\r\n-  }\r\n-\r\n-  return (\r\n-    <AuthContext.Provider\r\n-      value={{\r\n-        user,\r\n-        loading,\r\n-        initializing,\r\n-        signUp,\r\n-        signIn,\r\n-        logout\r\n-      }}\r\n-    >\r\n-      {children}\r\n-    </AuthContext.Provider>\r\n-  );\r\n-}\r\n-\r\n-export default AuthProvider;\r\n"
                },
                {
                    "date": 1759336555720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n   \r\n   }\r\n \r\n   // Deslogar o usuario\r\n-  async function logout() {\r\n+  async function sign() {\r\n     console.log(\"Deslogando usuário...\");\r\n     try {\r\n       await logoutUser();\r\n       return { success: true };\r\n"
                },
                {
                    "date": 1759336607594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,9 @@\n   \r\n   }\r\n \r\n   // Deslogar o usuario\r\n-  async function sign() {\r\n-    console.log(\"Deslogando usuário...\");\r\n+  async function signOut() {\r\n     try {\r\n       await logoutUser();\r\n       return { success: true };\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1759336656472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         loading,\r\n         initializing,\r\n         signUp,\r\n         signIn,\r\n-        logout\r\n+        \r\n       }}\r\n     >\r\n       {children}\r\n     </AuthContext.Provider>\r\n"
                },
                {
                    "date": 1759370990835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,13 @@\n import { db, auth } from \"../services/firebase/firebaseConnection\";\r\n import {signOut as firebaseSignOut, onAuthStateChanged} from \"firebase/auth\";\r\n \r\n \r\n+import { saveTermsAcceptance } from \"../services/firebase/firestoreService\";\r\n import { signInUser, signUpUser, logoutUser, validarSenha } from \"../services/firebase/userService\";\r\n \r\n+const TERMS_VERSION = \"1.0\";\r\n+\r\n export const AuthContext = createContext({});\r\n \r\n function AuthProvider({ children }) {\r\n   const [user, setUser] = useState(null);\r\n@@ -59,8 +62,17 @@\n     }\r\n \r\n     try {\r\n       await signUpUser(name, email, password);\r\n+      const createdUser = await signUpUser(name, email, password);\r\n+\r\n+      // Salva o aceite dos termos de uso\r\n+      await saveTermsAcceptance(createdUser.uid, {\r\n+        acceptedTerms: true,\r\n+        acceptedAt: new Date().toISOString(),\r\n+        termsVersion: TERMS_VERSION,\r\n+      });\r\n+\r\n       return { success: true };\r\n     } catch (error) {\r\n       return { success: false, message: error.message };\r\n     } finally {\r\n@@ -87,9 +99,9 @@\n         loading,\r\n         initializing,\r\n         signUp,\r\n         signIn,\r\n-        \r\n+        signOut\r\n       }}\r\n     >\r\n       {children}\r\n     </AuthContext.Provider>\r\n"
                },
                {
                    "date": 1759371025804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,10 @@\n import { db, auth } from \"../services/firebase/firebaseConnection\";\r\n import {signOut as firebaseSignOut, onAuthStateChanged} from \"firebase/auth\";\r\n \r\n \r\n-import { saveTermsAcceptance } from \"../services/firebase/firestoreService\";\r\n import { signInUser, signUpUser, logoutUser, validarSenha } from \"../services/firebase/userService\";\r\n \r\n-const TERMS_VERSION = \"1.0\";\r\n-\r\n export const AuthContext = createContext({});\r\n \r\n function AuthProvider({ children }) {\r\n   const [user, setUser] = useState(null);\r\n@@ -62,17 +59,8 @@\n     }\r\n \r\n     try {\r\n       await signUpUser(name, email, password);\r\n-      const createdUser = await signUpUser(name, email, password);\r\n-\r\n-      // Salva o aceite dos termos de uso\r\n-      await saveTermsAcceptance(createdUser.uid, {\r\n-        acceptedTerms: true,\r\n-        acceptedAt: new Date().toISOString(),\r\n-        termsVersion: TERMS_VERSION,\r\n-      });\r\n-\r\n       return { success: true };\r\n     } catch (error) {\r\n       return { success: false, message: error.message };\r\n     } finally {\r\n"
                }
            ],
            "date": 1759336090435,
            "name": "Commit-0",
            "content": "import React, { createContext, useState, useEffect } from \"react\";\r\nimport { collection, query, where, getDocs, doc, getDoc, setDoc } from \"firebase/firestore\";\r\nimport { db, auth } from \"../services/firebase/firebaseConnection\";\r\nimport {signOut as firebaseSignOut, onAuthStateChanged} from \"firebase/auth\";\r\n\r\n\r\nimport { signInUser, signUpUser, logoutUser, validarSenha } from \"../services/firebase/userService\";\r\n\r\nexport const AuthContext = createContext({});\r\n\r\nfunction AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [initializing, setInitializing] = useState(true); // controla o primeiro carregamento\r\n\r\n  // Detecta automaticamente se o usuário está logado\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async currentUser => {\r\n      setInitializing(true);\r\n      if (currentUser) {\r\n        setLoading(true);\r\n\r\n        // Busca dados do usuário no Firestore\r\n        const docRef = doc(db, \"users\", currentUser.uid);\r\n        const snapshot = await getDoc(docRef);\r\n        if (snapshot.exists()) {\r\n          setUser(snapshot.data());\r\n        }\r\n\r\n        setLoading(false);\r\n      } else {\r\n        setUser(null);\r\n      }\r\n      setInitializing(false);\r\n    });\r\n\r\n    return () => unsubscribe(); \r\n  }, []);\r\n\r\n  // Logar o usuario\r\n  async function signIn(email, password) {\r\n    setLoading(true);\r\n    try {\r\n      await signInUser(email, password);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, message: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  // Cadastro novo usuário\r\n  async function signUp(name, email, password) {\r\n    setLoading(true);\r\n    //Valida a senha\r\n    if( !validarSenha(password)){\r\n      return { success: false, message: \"A senha deve conter pelo menos 8 caracteres, uma letra maiúscula, uma letra minúscula e um número.\" };\r\n    }\r\n\r\n    try {\r\n      await signUpUser(name, email, password);\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, message: error.message };\r\n    } finally {\r\n      setLoading(false);  \r\n    }\r\n  \r\n  }\r\n\r\n  // Deslogar o usuario\r\n  async function logout() {\r\n    console\r\n    try {\r\n      await logoutUser();\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.log(\"Erro ao deslogar:\", error);\r\n      return { success: false, message: error.message };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        loading,\r\n        initializing,\r\n        signUp,\r\n        signIn,\r\n        logout\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default AuthProvider;\r\n"
        }
    ]
}