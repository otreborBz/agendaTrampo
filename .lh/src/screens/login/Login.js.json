{
    "sourceFile": "src/screens/login/Login.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1758892428280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758892433940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import { useNavigation } from '@react-navigation/native';\r\n+import { useContext, useState } from 'react';\r\n+import { ActivityIndicator, Image, KeyboardAvoidingView, Platform, Pressable, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import { AuthContext } from '../../contexts/Auth';\r\n+import styles from './styles';\r\n+\r\n+export default function Login() {\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Abrir tela de registro\r\n+  function gotoRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function gotoChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+        setAlertVisible(true);\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView\r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Image source={require('../../..')} style={styles.logo} />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword}\r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity\r\n+          style={styles.button}\r\n+          activeOpacity={0.8}\r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity\r\n+        style={styles.buttonRecoveryPassword}\r\n+        activeOpacity={0.7}\r\n+        onPress={gotoChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+\r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={gotoRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758892439400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import { useNavigation } from '@react-navigation/native';\r\n+import { useContext, useState } from 'react';\r\n+import { ActivityIndicator, Image, KeyboardAvoidingView, Platform, Pressable, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import { AuthContext } from '../../contexts/Auth';\r\n+import styles from './styles';\r\n+\r\n+export default function Login() {\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Abrir tela de registro\r\n+  function gotoRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function gotoChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+        setAlertVisible(true);\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView\r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Image source={require('../../../assets')} style={styles.logo} />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword}\r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity\r\n+          style={styles.button}\r\n+          activeOpacity={0.8}\r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity\r\n+        style={styles.buttonRecoveryPassword}\r\n+        activeOpacity={0.7}\r\n+        onPress={gotoChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+\r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={gotoRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758892445712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import { useNavigation } from '@react-navigation/native';\r\n+import { useContext, useState } from 'react';\r\n+import { ActivityIndicator, Image, KeyboardAvoidingView, Platform, Pressable, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import { AuthContext } from '../../contexts/Auth';\r\n+import styles from './styles';\r\n+\r\n+export default function Login() {\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Abrir tela de registro\r\n+  function gotoRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function gotoChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+        setAlertVisible(true);\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView\r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Image source={require('../../../assets/iconName.png')} style={styles.logo} />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword}\r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity\r\n+          style={styles.button}\r\n+          activeOpacity={0.8}\r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity\r\n+        style={styles.buttonRecoveryPassword}\r\n+        activeOpacity={0.7}\r\n+        onPress={gotoChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+\r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={gotoRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758892488831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+import { useNavigation } from '@react-navigation/native';\r\n+import { useContext, useState } from 'react';\r\n+import { ActivityIndicator, Image, KeyboardAvoidingView, Platform, Pressable, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n+import Icon from 'react-native-vector-icons/Feather';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+import { AuthContext } from '../../contexts/Auth';\r\n+import styles from './styles';\r\n+\r\n+export default function Login() {\r\n+\r\n+  const navigation = useNavigation();\r\n+\r\n+  const { signIn, loading } = useContext(AuthContext);\r\n+\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n+\r\n+  // Estado para o alerta customizado\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+\r\n+\r\n+\r\n+  // Abrir tela de registro\r\n+  function gotoRegister() {\r\n+    navigation.navigate('Register');\r\n+  }\r\n+\r\n+  // Abrir tela de recuperação de senha\r\n+  function gotoChangeRecord() {\r\n+    navigation.navigate('ChangeRecord');\r\n+  }\r\n+\r\n+  // Função de login\r\n+  async function handleLogin() {\r\n+    if (email === '' || password === '') {\r\n+      setAlertInfo({\r\n+        title: 'Atenção',\r\n+        message: 'Por favor, preencha todos os campos.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const result = await signIn(email, password);\r\n+      if (!result.success) {\r\n+        setAlertInfo({\r\n+          title: 'Erro no Login',\r\n+          message: result.message,\r\n+        });\r\n+        setAlertVisible(true);\r\n+\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({\r\n+        title: 'Erro',\r\n+        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n+      });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  }\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView\r\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n+      style={styles.container}\r\n+    >\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => setAlertVisible(false)}\r\n+      />\r\n+      <Image source={require('../../../assets/iconName.png')} style={styles.logo} />\r\n+      <Image source={require('../../image/logo/iconName.png')} style={styles.logo} />\r\n+\r\n+      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n+\r\n+      <View style={styles.inputContainer}>\r\n+        <TextInput\r\n+          value={email}\r\n+          onChangeText={setEmail}\r\n+          placeholder='Email'\r\n+          style={styles.textInput}\r\n+          keyboardType=\"email-address\"\r\n+          autoCapitalize=\"none\"\r\n+          autoCorrect={false}\r\n+        />\r\n+        <View style={styles.passwordContainer}>\r\n+          <TextInput\r\n+            value={password}\r\n+            onChangeText={setPassword}\r\n+            placeholder='Senha'\r\n+            style={styles.passwordInput}\r\n+            secureTextEntry={!isPasswordVisible}\r\n+            autoCapitalize=\"none\"\r\n+          />\r\n+          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n+            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n+          </Pressable>\r\n+        </View>\r\n+        <TouchableOpacity\r\n+          style={styles.button}\r\n+          activeOpacity={0.8}\r\n+          onPress={handleLogin}\r\n+        >\r\n+          {loading ? (\r\n+            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n+          ) : (\r\n+            <Text style={styles.textButton}>Entrar</Text>\r\n+          )}\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity\r\n+        style={styles.buttonRecoveryPassword}\r\n+        activeOpacity={0.7}\r\n+        onPress={gotoChangeRecord}\r\n+      >\r\n+        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n+      </TouchableOpacity>\r\n+\r\n+      <View style={styles.buttonContainer}>\r\n+        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n+        <TouchableOpacity activeOpacity={0.7} onPress={gotoRegister}>\r\n+          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n+        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n+      </TouchableOpacity>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758892521252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,8 @@\n         message={alertInfo.message}\r\n         onClose={() => setAlertVisible(false)}\r\n       />\r\n       <Image source={require('../../../assets/iconName.png')} style={styles.logo} />\r\n-      <Image source={require('../../image/logo/iconName.png')} style={styles.logo} />\r\n \r\n       <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n \r\n       <View style={styles.inputContainer}>\r\n"
                }
            ],
            "date": 1758892428280,
            "name": "Commit-0",
            "content": "import { useNavigation } from '@react-navigation/native';\r\nimport { useContext, useState } from 'react';\r\nimport { ActivityIndicator, Image, KeyboardAvoidingView, Platform, Pressable, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\nimport Icon from 'react-native-vector-icons/Feather';\r\nimport CustomAlert from '../../components/customAlert/CustomAlert';\r\nimport { AuthContext } from '../../contexts/Auth';\r\nimport styles from './styles';\r\n\r\nexport default function Login() {\r\n\r\n  const navigation = useNavigation();\r\n\r\n  const { signIn, loading } = useContext(AuthContext);\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n\r\n  // Estado para o alerta customizado\r\n  const [alertVisible, setAlertVisible] = useState(false);\r\n  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n\r\n\r\n\r\n  // Abrir tela de registro\r\n  function gotoRegister() {\r\n    navigation.navigate('Register');\r\n  }\r\n\r\n  // Abrir tela de recuperação de senha\r\n  function gotoChangeRecord() {\r\n    navigation.navigate('ChangeRecord');\r\n  }\r\n\r\n  // Função de login\r\n  async function handleLogin() {\r\n    if (email === '' || password === '') {\r\n      setAlertInfo({\r\n        title: 'Atenção',\r\n        message: 'Por favor, preencha todos os campos.',\r\n      });\r\n      setAlertVisible(true);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await signIn(email, password);\r\n      if (!result.success) {\r\n        setAlertInfo({\r\n          title: 'Erro no Login',\r\n          message: result.message,\r\n        });\r\n        setAlertVisible(true);\r\n\r\n      }\r\n    } catch (error) {\r\n      setAlertInfo({\r\n        title: 'Erro',\r\n        message: 'Ocorreu um erro inesperado ao fazer login.',\r\n      });\r\n      setAlertVisible(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <KeyboardAvoidingView\r\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n      style={styles.container}\r\n    >\r\n      <CustomAlert\r\n        visible={alertVisible}\r\n        title={alertInfo.title}\r\n        message={alertInfo.message}\r\n        onClose={() => setAlertVisible(false)}\r\n      />\r\n      <Image source={require('../../../asset')} style={styles.logo} />\r\n\r\n      <Text style={styles.screenTitle}>Bem-vindo de volta!</Text>\r\n\r\n      <View style={styles.inputContainer}>\r\n        <TextInput\r\n          value={email}\r\n          onChangeText={setEmail}\r\n          placeholder='Email'\r\n          style={styles.textInput}\r\n          keyboardType=\"email-address\"\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n        />\r\n        <View style={styles.passwordContainer}>\r\n          <TextInput\r\n            value={password}\r\n            onChangeText={setPassword}\r\n            placeholder='Senha'\r\n            style={styles.passwordInput}\r\n            secureTextEntry={!isPasswordVisible}\r\n            autoCapitalize=\"none\"\r\n          />\r\n          <Pressable onPress={() => setIsPasswordVisible(!isPasswordVisible)} style={styles.eyeIcon}>\r\n            <Icon name={isPasswordVisible ? 'eye-off' : 'eye'} size={22} color={styles.eyeIcon.color} />\r\n          </Pressable>\r\n        </View>\r\n        <TouchableOpacity\r\n          style={styles.button}\r\n          activeOpacity={0.8}\r\n          onPress={handleLogin}\r\n        >\r\n          {loading ? (\r\n            <ActivityIndicator size=\"small\" color=\"#FFF\" />\r\n          ) : (\r\n            <Text style={styles.textButton}>Entrar</Text>\r\n          )}\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      <TouchableOpacity\r\n        style={styles.buttonRecoveryPassword}\r\n        activeOpacity={0.7}\r\n        onPress={gotoChangeRecord}\r\n      >\r\n        <Text style={styles.textRecoveryPassword}>Esqueceu sua senha?</Text>\r\n      </TouchableOpacity>\r\n\r\n      <View style={styles.buttonContainer}>\r\n        <Text style={styles.textButtonCreate}>Não tem uma conta?</Text>\r\n        <TouchableOpacity activeOpacity={0.7} onPress={gotoRegister}>\r\n          <Text style={styles.textButtonRegister}>Cadastre-se</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      <TouchableOpacity style={styles.buttonTerms} activeOpacity={0.7}>\r\n        <Text style={styles.textButtonTerms}>Termos de uso</Text>\r\n      </TouchableOpacity>\r\n    </KeyboardAvoidingView>\r\n  );\r\n}\r\n"
        }
    ]
}