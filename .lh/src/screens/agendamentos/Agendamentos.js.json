{
    "sourceFile": "src/screens/agendamentos/Agendamentos.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1758723829721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758723835104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,8 @@\n           setAlertVisible(false);\r\n           if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n           setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n         }}\r\n-      />\r\n       /> \r\n       <ScrollView contentContainerStyle={{ paddingBottom: 40 }}>\r\n         <View style={{ alignItems: 'center' }}>\r\n           <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n"
                },
                {
                    "date": 1758723913407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,451 @@\n+import { useFocusEffect } from '@react-navigation/native';\r\n+import React, { useCallback, useContext, useEffect, useState } from 'react';\r\n+import { ActivityIndicator, KeyboardAvoidingView, Modal, Platform, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n+\r\n+import { AuthContext } from '../../contexts/Auth';\r\n+\r\n+import { salvarAgendamento } from '../../services/agendamentoService/agendamentoService';\r\n+import { buscarCep } from '../../services/apiViaCep/apiViaCepService';\r\n+\r\n+import { FontAwesome5, Ionicons, MaterialIcons } from '@expo/vector-icons';\r\n+import { colors } from '../../themes/colors/Colors';\r\n+import styles from './styles';\r\n+\r\n+import DateTimePicker from '@react-native-community/datetimepicker';\r\n+import ActionAlert from '../../components/actionAlert/actionAlert';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+\r\n+import { carregarServicos, salvarServicos } from '../../services/servico/servico';\r\n+\r\n+\r\n+\r\n+\r\n+export default function Agendamentos({ route, navigation }) {\r\n+  const { user } = useContext(AuthContext);\r\n+  const [agendamentoEdit, setAgendamentoEdit] = useState(route?.params?.agendamento || null);\r\n+\r\n+  const [nomeCliente, setNomeCliente] = useState(agendamentoEdit?.nomeCliente || '');\r\n+  const [telefone, setTelefone] = useState(agendamentoEdit?.telefone || '');\r\n+  const [dataHora, setDataHora] = useState(agendamentoEdit?.dataHora ? new Date(agendamentoEdit.dataHora) : new Date());\r\n+  const [servico, setServico] = useState(agendamentoEdit?.servico || '');\r\n+  const [valor, setValor] = useState('');\r\n+  const [endereco, setEndereco] = useState(agendamentoEdit?.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n+  const [status, setStatus] = useState(agendamentoEdit?.status || 'Pendente');\r\n+  const [servicosExistentes, setServicosExistentes] = useState([]);\r\n+  const [novoServico, setNovoServico] = useState('');\r\n+  const [modalServicoVisible, setModalServicoVisible] = useState(false);\r\n+  const [loadingCep, setLoadingCep] = useState(false);\r\n+  const [modalEnderecoVisible, setModalEnderecoVisible] = useState(false);\r\n+  const [showDatePicker, setShowDatePicker] = useState(false);\r\n+  const [showTimePicker, setShowTimePicker] = useState(false);\r\n+\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+  const [onAlertCloseAction, setOnAlertCloseAction] = useState(null);\r\n+\r\n+  const [actionAlertVisible, setActionAlertVisible] = useState(false);\r\n+  const [actionAlertInfo, setActionAlertInfo] = useState({ title: '', message: '' });\r\n+  const [onActionAlertConfirm, setOnActionAlertConfirm] = useState(null);\r\n+\r\n+  // Limpa os campos do formulário\r\n+  const limparCampos = () => {\r\n+    setNomeCliente('');\r\n+    setTelefone('');\r\n+    setDataHora(new Date());\r\n+    setServico('');\r\n+    setValor('');\r\n+    setEndereco({ rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n+    setStatus('Pendente');\r\n+    setAgendamentoEdit(null);\r\n+  };\r\n+\r\n+  // Efeito que roda toda vez que a tela ganha foco\r\n+  useFocusEffect(\r\n+    useCallback(() => {\r\n+      const agendamentoParam = route.params?.agendamento;\r\n+      if (agendamentoParam) {\r\n+        // Se veio um agendamento para editar, preenche os campos\r\n+        setAgendamentoEdit(agendamentoParam);\r\n+        setNomeCliente(agendamentoParam.nomeCliente || '');\r\n+        setTelefone(agendamentoParam.telefone || '');\r\n+        setDataHora(agendamentoParam.dataHora ? new Date(agendamentoParam.dataHora) : new Date());\r\n+        setServico(agendamentoParam.servico || '');\r\n+        setEndereco(agendamentoParam.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n+        setStatus(agendamentoParam.status || 'Pendente');\r\n+        setValor(agendamentoParam.valor ? formatValor(String(agendamentoParam.valor).replace(/\\D/g, '')) : '');\r\n+      } else {\r\n+        // Se não veio parâmetro, limpa tudo para garantir que é uma nova criação\r\n+        limparCampos();\r\n+      }\r\n+    }, [route.params?.agendamento])\r\n+  );\r\n+\r\n+  useEffect(() => {\r\n+    async function loadServicos() {\r\n+      // Carrega os serviços salvos no AsyncStorage\r\n+      const servicosSalvos = await carregarServicos();\r\n+      setServicosExistentes(servicosSalvos);\r\n+    }\r\n+    loadServicos(); // Chama a função para carregar os serviços quando o componente é montado\r\n+  }, []);\r\n+\r\n+  const handleSaveAgendamento = async () => {\r\n+    if (!nomeCliente || !telefone || !dataHora) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Por favor, preencha todos os campos.' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+    try {\r\n+      await salvarAgendamento({ nomeCliente, telefone, dataHora, servico, valor, endereco, status, uid: user.uid }, agendamentoEdit?.id);\r\n+      setAlertInfo({ title: \"Sucesso\", message: `Agendamento ${agendamentoEdit ? 'atualizado' : 'cadastrado'}!` });\r\n+      setOnAlertCloseAction(() => () => {\r\n+        limparCampos();\r\n+        navigation.goBack();\r\n+      });\r\n+      setAlertVisible(true);\r\n+    } catch (error) {\r\n+      setAlertInfo({ title: \"Erro\", message: \"Não foi possível salvar o agendamento. Tente novamente.\" });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  };\r\n+\r\n+  const onChangeDate = (event, selectedDate) => {\r\n+    setShowDatePicker(false);\r\n+    if (event.type === 'dismissed') return;\r\n+    const currentDate = selectedDate || dataHora;\r\n+    setDataHora(currentDate);\r\n+    if (Platform.OS === 'android') setShowTimePicker(true);\r\n+  };\r\n+\r\n+  const onChangeTime = (event, selectedTime) => {\r\n+    setShowTimePicker(false);\r\n+    if (event.type === 'dismissed') return;\r\n+    const updatedDateTime = new Date(dataHora);\r\n+    updatedDateTime.setHours(selectedTime.getHours());\r\n+    updatedDateTime.setMinutes(selectedTime.getMinutes());\r\n+    setDataHora(updatedDateTime);\r\n+  };\r\n+\r\n+  const adicionarServico = async () => {\r\n+    const servicoParaAdicionar = novoServico.trim();\r\n+\r\n+    if (!servicoParaAdicionar) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um serviço!' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    // Verifica se o serviço já existe (ignorando maiúsculas/minúsculas)\r\n+    if (servicosExistentes.some(s => s.toLowerCase() === servicoParaAdicionar.toLowerCase())) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Este serviço já foi adicionado.' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    const newList = [...servicosExistentes, servicoParaAdicionar];\r\n+    setServicosExistentes(newList);\r\n+\r\n+    // Salva a lista completa no AsyncStorage\r\n+    await salvarServicos(newList);\r\n+\r\n+    setServico(servicoParaAdicionar);\r\n+    setNovoServico('');\r\n+    setModalServicoVisible(false);\r\n+  };\r\n+\r\n+\r\n+  const removerServico = (index) => {\r\n+    const servicoParaRemover = servicosExistentes[index];\r\n+    if (!servicoParaRemover) return;\r\n+\r\n+    setActionAlertInfo({ title: 'Excluir Serviço', message: `Tem certeza que deseja excluir \"${servicoParaRemover}\"?` });\r\n+\r\n+    // Define a função que será executada ao confirmar a exclusão\r\n+    setOnActionAlertConfirm(() => async () => {\r\n+      const newList = servicosExistentes.filter((_, i) => i !== index);\r\n+      setServicosExistentes(newList);\r\n+\r\n+      // Salva a lista atualizada no AsyncStorage\r\n+      await salvarServicos(newList);\r\n+\r\n+      // Se o serviço removido era o que estava selecionado, limpa a seleção\r\n+      if (servico === servicoParaRemover) setServico('');\r\n+    });\r\n+\r\n+    setActionAlertVisible(true);\r\n+  };\r\n+\r\n+\r\n+  const selecionarServico = (servicoSelecionado) => {\r\n+    setServico(servicoSelecionado);\r\n+    setModalServicoVisible(false);\r\n+  };\r\n+\r\n+\r\n+  // busca o cep\r\n+  const handleSearchCep = async () => {\r\n+    setLoadingCep(true);\r\n+\r\n+    if (!endereco.cep || endereco.cep.length !== 8) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um CEP válido.' });\r\n+      setAlertVisible(true);\r\n+      setLoadingCep(false);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const resultado = await buscarCep(endereco.cep);\r\n+      if (resultado) {\r\n+        setEndereco(prev => ({ ...prev, ...resultado }));\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({ title: 'Erro', message: error.message });\r\n+      setAlertVisible(true);\r\n+    } finally {\r\n+      setLoadingCep(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+\r\n+  const saveEndereco = () => {\r\n+    const { rua, numero, bairro, cidade, estado, cep } = endereco;\r\n+    if (!rua || !numero || !bairro) {\r\n+      setAlertInfo({ title: 'Erro', message: 'Preencha todos os campos do endereço!' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+    setModalEnderecoVisible(false);\r\n+    setAlertInfo({ title: 'Sucesso', message: 'Endereço salvo!' });\r\n+    setAlertVisible(true);\r\n+\r\n+  };\r\n+\r\n+  const formatTelefone = (text) => {\r\n+    let cleaned = text.replace(/\\D/g, '');\r\n+    if (cleaned.length > 11) cleaned = cleaned.slice(0, 11);\r\n+    if (cleaned.length <= 2) return `(${cleaned}`;\r\n+    if (cleaned.length <= 6) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2)}`;\r\n+    if (cleaned.length <= 10) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7)}`;\r\n+    return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7, 11)}`;\r\n+  };\r\n+\r\n+  const formatValor = (text) => {\r\n+    let cleaned = text.replace(/\\D/g, '');\r\n+    if (!cleaned) return '';\r\n+    let num = parseInt(cleaned, 10);\r\n+    let formatted = (num / 100).toFixed(2);\r\n+    formatted = formatted.replace('.', ',').replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n+    return formatted;\r\n+  };\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.container}>\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => {\r\n+          setAlertVisible(false);\r\n+          if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n+          setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n+        }}\r\n+      />\r\n+      <ScrollView contentContainerStyle={{ paddingBottom: 40 } }>\r\n+        <View style={{ alignItems: 'center' }}>\r\n+          <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n+        </View>\r\n+\r\n+        <Text style={styles.label}>Nome do Cliente*</Text>\r\n+        <View style={styles.inputIconRowBox}>\r\n+          <Ionicons name=\"person-outline\" size={20} color={colors.secondary} />\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            value={nomeCliente}\r\n+            onChangeText={setNomeCliente}\r\n+            placeholder=\"Nome completo\"\r\n+            placeholderTextColor={colors.gray}\r\n+          />\r\n+        </View>\r\n+\r\n+        <Text style={styles.label}>Telefone*</Text>\r\n+        <View style={styles.inputIconRowBox}>\r\n+          <Ionicons name=\"call-outline\" size={20} color={colors.secondary} />\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            value={telefone}\r\n+            onChangeText={(text) => setTelefone(formatTelefone(text))}\r\n+            placeholder=\"(00) 00000-0000\"\r\n+            keyboardType=\"phone-pad\"\r\n+            placeholderTextColor={colors.gray}\r\n+          />\r\n+        </View>\r\n+\r\n+        <Text style={styles.label}>Data e Hora*</Text>\r\n+        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setShowDatePicker(true)}>\r\n+          <MaterialIcons name=\"date-range\" size={20} color={colors.secondary} />\r\n+          <Text style={{ color: colors.text }}>{dataHora.toLocaleString('pt-BR')}</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        {showDatePicker && (\r\n+          <DateTimePicker value={dataHora} mode=\"date\" display=\"default\" onChange={onChangeDate} />\r\n+        )}\r\n+        {showTimePicker && (\r\n+          <DateTimePicker value={dataHora} mode=\"time\" display=\"default\" onChange={onChangeTime} />\r\n+        )}\r\n+\r\n+        <Text style={styles.label}>Serviço</Text>\r\n+        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setModalServicoVisible(true)}>\r\n+          <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n+          <View style={{ width: 8 }} />\r\n+          <Text style={{ color: servico ? colors.text : colors.gray }}>{servico || 'Selecione um serviço'}</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        <Text style={styles.label}>Valor (R$)</Text>\r\n+        <View style={styles.inputIconRowBox}>\r\n+          <FontAwesome5 name=\"money-bill-wave\" size={18} color={colors.secondary} />\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            value={valor}\r\n+            onChangeText={(text) => setValor(formatValor(text))}\r\n+            placeholder=\"0,00\"\r\n+            keyboardType=\"numeric\"\r\n+            placeholderTextColor={colors.gray}\r\n+          />\r\n+        </View>\r\n+\r\n+        <TouchableOpacity style={styles.buttonEndereco} onPress={() => setModalEnderecoVisible(true)}>\r\n+          <Ionicons name=\"location-outline\" size={18} color={colors.white} />\r\n+          <Text style={styles.textButtonEndereco}>Cadastrar Endereço</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        {/* Modal de serviços */}\r\n+        <Modal visible={modalServicoVisible} animationType=\"slide\" transparent>\r\n+          <View style={styles.modalContainer}>\r\n+            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n+              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n+                <Text style={styles.headerTitle}>Serviços</Text>\r\n+                <View style={styles.servicoInputRow}>\r\n+                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n+                    <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n+                    <TextInput\r\n+                      style={styles.inputBox}\r\n+                      value={novoServico}\r\n+                      onChangeText={setNovoServico}\r\n+                      placeholder=\"Novo serviço\"\r\n+                      placeholderTextColor={colors.gray}\r\n+                      onSubmitEditing={adicionarServico}\r\n+                      returnKeyType=\"done\"\r\n+                    />\r\n+                  </View>\r\n+                  <TouchableOpacity\r\n+                    style={[styles.buttonAddServico, { marginLeft: 8, height: 48, width: 48, borderRadius: 8, alignItems: 'center', justifyContent: 'center', paddingHorizontal: 0 }]}\r\n+                    onPress={adicionarServico}\r\n+                  >\r\n+                    <MaterialIcons name=\"save\" size={26} color=\"#fff\" />\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+\r\n+                <View style={{ maxHeight: 200 }}>\r\n+                  {servicosExistentes.map((s, idx) => (\r\n+                    <TouchableOpacity key={idx} style={styles.servicoItem} onPress={() => selecionarServico(s)}>\r\n+                      <Text style={{ color: colors.text }}>{s}</Text>\r\n+                      <TouchableOpacity onPress={() => removerServico(idx)}>\r\n+                        <MaterialIcons name=\"delete\" size={22} color={colors.error} style={{ marginLeft: 10 }} />\r\n+                      </TouchableOpacity>\r\n+                    </TouchableOpacity>\r\n+                  ))}\r\n+                </View>\r\n+              </ScrollView>\r\n+              <View style={{ width: '100%', paddingTop: 8 }}>\r\n+                <TouchableOpacity style={[styles.buttonCloseModal, { width: '100%', marginRight: 0, marginTop: 0 }]} onPress={() => setModalServicoVisible(false)}>\r\n+                  <Text style={styles.buttonTextCloseModal}>Fechar</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            </View>\r\n+          </View>\r\n+        </Modal>\r\n+\r\n+        {/* Modal de endereço */}\r\n+        <Modal visible={modalEnderecoVisible} animationType=\"slide\" transparent>\r\n+          <View style={styles.modalContainer}>\r\n+            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n+              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n+                <Text style={styles.modalTitle}>Endereço</Text>\r\n+                <Text style={styles.label}>CEP*</Text>\r\n+                <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>\r\n+                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n+                    <MaterialIcons name=\"location-searching\" size={20} color={colors.secondary} />\r\n+                    <TextInput\r\n+                      style={styles.inputBox}\r\n+                      value={endereco.cep}\r\n+                      onChangeText={cep => setEndereco({ ...endereco, cep })}\r\n+                      placeholder=\"CEP\"\r\n+                      keyboardType=\"numeric\"\r\n+                      placeholderTextColor={colors.gray}\r\n+                    />\r\n+                  </View>\r\n+                  <TouchableOpacity style={styles.buttonBuscarCep} onPress={handleSearchCep}>\r\n+                    {loadingCep ? <ActivityIndicator color=\"#fff\" /> : <MaterialIcons name=\"search\" size={22} color=\"#fff\" />}\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+\r\n+                {['rua', 'numero', 'bairro', 'cidade', 'estado'].map((campo, i) => (\r\n+                  <React.Fragment key={i}>\r\n+                    <Text style={styles.label}>{campo.charAt(0).toUpperCase() + campo.slice(1)}*</Text>\r\n+                    <View style={styles.inputIconRowBox}>\r\n+                      <MaterialIcons name={campo === 'numero' ? 'pin' : campo === 'cidade' ? 'location-city' : 'streetview'} size={20} color={colors.secondary} style={{ marginRight: 8 }} />\r\n+                      <TextInput\r\n+                        style={styles.inputBox}\r\n+                        value={endereco[campo]}\r\n+                        onChangeText={(text) => setEndereco({ ...endereco, [campo]: text })}\r\n+                        placeholder={campo.charAt(0).toUpperCase() + campo.slice(1)}\r\n+                        placeholderTextColor={colors.gray}\r\n+                        keyboardType={campo === 'numero' ? 'numeric' : 'default'}\r\n+                      />\r\n+                    </View>\r\n+                  </React.Fragment>\r\n+                ))}\r\n+\r\n+                <View style={{ flexDirection: 'row', justifyContent: 'flex-end', marginTop: 16 }}>\r\n+                  <TouchableOpacity style={[styles.buttonCloseModal, { flex: 1, marginRight: 8 }]} onPress={() => setModalEnderecoVisible(false)}>\r\n+                    <Text style={styles.buttonTextCloseModal}>Cancelar</Text>\r\n+                  </TouchableOpacity>\r\n+                  <TouchableOpacity style={[styles.buttonSaveModal, { flex: 1 }]} onPress={saveEndereco}>\r\n+                    <Text style={styles.buttonTextSaveModal}>Salvar</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              </ScrollView>\r\n+            </View>\r\n+          </View>\r\n+        </Modal>\r\n+\r\n+        <ActionAlert\r\n+          visible={actionAlertVisible}\r\n+          title={actionAlertInfo.title}\r\n+          message={actionAlertInfo.message}\r\n+          onClose={() => setActionAlertVisible(false)}\r\n+          actions={[\r\n+            { text: \"Cancelar\", onPress: () => setActionAlertVisible(false) },\r\n+            {\r\n+              text: \"Excluir\", destructive: true, onPress: () => {\r\n+                if (typeof onActionAlertConfirm === 'function') onActionAlertConfirm();\r\n+                setActionAlertVisible(false);\r\n+              }\r\n+            },\r\n+          ]}\r\n+        />\r\n+\r\n+      </ScrollView>\r\n+\r\n+      <View style={styles.footerRow}>\r\n+        <TouchableOpacity style={styles.buttonFooterCancel} onPress={() => navigation.goBack()}>\r\n+          <Text style={styles.buttonTextCancel}>Cancelar</Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity style={styles.buttonFooter} onPress={handleSaveAgendamento}>\r\n+          <Text style={styles.buttonTextFooter}>{agendamentoEdit ? 'Salvar' : 'Agendar'}</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758723943087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,451 @@\n+import { useFocusEffect } from '@react-navigation/native';\r\n+import React, { useCallback, useContext, useEffect, useState } from 'react';\r\n+import { ActivityIndicator, KeyboardAvoidingView, Modal, Platform, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n+\r\n+import { AuthContext } from '../../contexts/Auth';\r\n+\r\n+import { salvarAgendamento } from '../../services/agendamentoService/agendamentoService';\r\n+import { buscarCep } from '../../services/apiViaCep/apiViaCepService';\r\n+\r\n+import { FontAwesome5, Ionicons, MaterialIcons } from '@expo/vector-icons';\r\n+import { colors } from '../../themes/colors/Colors';\r\n+import styles from './styles';\r\n+\r\n+import DateTimePicker from '@react-native-community/datetimepicker';\r\n+import ActionAlert from '../../components/actionAlert/actionAlert';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+\r\n+import { carregarServicos, salvarServicos } from '../../services/servico/servico';\r\n+\r\n+\r\n+\r\n+\r\n+export default function Agendamentos({ route, navigation }) {\r\n+  const { user } = useContext(AuthContext);\r\n+  const [agendamentoEdit, setAgendamentoEdit] = useState(route?.params?.agendamento || null);\r\n+\r\n+  const [nomeCliente, setNomeCliente] = useState(agendamentoEdit?.nomeCliente || '');\r\n+  const [telefone, setTelefone] = useState(agendamentoEdit?.telefone || '');\r\n+  const [dataHora, setDataHora] = useState(agendamentoEdit?.dataHora ? new Date(agendamentoEdit.dataHora) : new Date());\r\n+  const [servico, setServico] = useState(agendamentoEdit?.servico || '');\r\n+  const [valor, setValor] = useState('');\r\n+  const [endereco, setEndereco] = useState(agendamentoEdit?.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n+  const [status, setStatus] = useState(agendamentoEdit?.status || 'Pendente');\r\n+  const [servicosExistentes, setServicosExistentes] = useState([]);\r\n+  const [novoServico, setNovoServico] = useState('');\r\n+  const [modalServicoVisible, setModalServicoVisible] = useState(false);\r\n+  const [loadingCep, setLoadingCep] = useState(false);\r\n+  const [modalEnderecoVisible, setModalEnderecoVisible] = useState(false);\r\n+  const [showDatePicker, setShowDatePicker] = useState(false);\r\n+  const [showTimePicker, setShowTimePicker] = useState(false);\r\n+\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+  const [onAlertCloseAction, setOnAlertCloseAction] = useState(null);\r\n+\r\n+  const [actionAlertVisible, setActionAlertVisible] = useState(false);\r\n+  const [actionAlertInfo, setActionAlertInfo] = useState({ title: '', message: '' });\r\n+  const [onActionAlertConfirm, setOnActionAlertConfirm] = useState(null);\r\n+\r\n+  // Limpa os campos do formulário\r\n+  const limparCampos = () => {\r\n+    setNomeCliente('');\r\n+    setTelefone('');\r\n+    setDataHora(new Date());\r\n+    setServico('');\r\n+    setValor('');\r\n+    setEndereco({ rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n+    setStatus('Pendente');\r\n+    setAgendamentoEdit(null);\r\n+  };\r\n+\r\n+  // Efeito que roda toda vez que a tela ganha foco\r\n+  useFocusEffect(\r\n+    useCallback(() => {\r\n+      const agendamentoParam = route.params?.agendamento;\r\n+      if (agendamentoParam) {\r\n+        // Se veio um agendamento para editar, preenche os campos\r\n+        setAgendamentoEdit(agendamentoParam);\r\n+        setNomeCliente(agendamentoParam.nomeCliente || '');\r\n+        setTelefone(agendamentoParam.telefone || '');\r\n+        setDataHora(agendamentoParam.dataHora ? new Date(agendamentoParam.dataHora) : new Date());\r\n+        setServico(agendamentoParam.servico || '');\r\n+        setEndereco(agendamentoParam.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n+        setStatus(agendamentoParam.status || 'Pendente');\r\n+        setValor(agendamentoParam.valor ? formatValor(String(agendamentoParam.valor).replace(/\\D/g, '')) : '');\r\n+      } else {\r\n+        // Se não veio parâmetro, limpa tudo para garantir que é uma nova criação\r\n+        limparCampos();\r\n+      }\r\n+    }, [route.params?.agendamento])\r\n+  );\r\n+\r\n+  useEffect(() => {\r\n+    async function loadServicos() {\r\n+      // Carrega os serviços salvos no AsyncStorage\r\n+      const servicosSalvos = await carregarServicos();\r\n+      setServicosExistentes(servicosSalvos);\r\n+    }\r\n+    loadServicos(); // Chama a função para carregar os serviços quando o componente é montado\r\n+  }, []);\r\n+\r\n+  const handleSaveAgendamento = async () => {\r\n+    if (!nomeCliente || !telefone || !dataHora) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Por favor, preencha todos os campos.' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+    try {\r\n+      await salvarAgendamento({ nomeCliente, telefone, dataHora, servico, valor, endereco, status, uid: user.uid }, agendamentoEdit?.id);\r\n+      setAlertInfo({ title: \"Sucesso\", message: `Agendamento ${agendamentoEdit ? 'atualizado' : 'cadastrado'}!` });\r\n+      setOnAlertCloseAction(() => () => {\r\n+        limparCampos();\r\n+        navigation.goBack();\r\n+      });\r\n+      setAlertVisible(true);\r\n+    } catch (error) {\r\n+      setAlertInfo({ title: \"Erro\", message: \"Não foi possível salvar o agendamento. Tente novamente.\" });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  };\r\n+\r\n+  const onChangeDate = (event, selectedDate) => {\r\n+    setShowDatePicker(false);\r\n+    if (event.type === 'dismissed') return;\r\n+    const currentDate = selectedDate || dataHora;\r\n+    setDataHora(currentDate);\r\n+    if (Platform.OS === 'android') setShowTimePicker(true);\r\n+  };\r\n+\r\n+  const onChangeTime = (event, selectedTime) => {\r\n+    setShowTimePicker(false);\r\n+    if (event.type === 'dismissed') return;\r\n+    const updatedDateTime = new Date(dataHora);\r\n+    updatedDateTime.setHours(selectedTime.getHours());\r\n+    updatedDateTime.setMinutes(selectedTime.getMinutes());\r\n+    setDataHora(updatedDateTime);\r\n+  };\r\n+\r\n+  const adicionarServico = async () => {\r\n+    const servicoParaAdicionar = novoServico.trim();\r\n+\r\n+    if (!servicoParaAdicionar) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um serviço!' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    // Verifica se o serviço já existe (ignorando maiúsculas/minúsculas)\r\n+    if (servicosExistentes.some(s => s.toLowerCase() === servicoParaAdicionar.toLowerCase())) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Este serviço já foi adicionado.' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    const newList = [...servicosExistentes, servicoParaAdicionar];\r\n+    setServicosExistentes(newList);\r\n+\r\n+    // Salva a lista completa no AsyncStorage\r\n+    await salvarServicos(newList);\r\n+\r\n+    setServico(servicoParaAdicionar);\r\n+    setNovoServico('');\r\n+    setModalServicoVisible(false);\r\n+  };\r\n+\r\n+\r\n+  const removerServico = (index) => {\r\n+    const servicoParaRemover = servicosExistentes[index];\r\n+    if (!servicoParaRemover) return;\r\n+\r\n+    setActionAlertInfo({ title: 'Excluir Serviço', message: `Tem certeza que deseja excluir \"${servicoParaRemover}\"?` });\r\n+\r\n+    // Define a função que será executada ao confirmar a exclusão\r\n+    setOnActionAlertConfirm(() => async () => {\r\n+      const newList = servicosExistentes.filter((_, i) => i !== index);\r\n+      setServicosExistentes(newList);\r\n+\r\n+      // Salva a lista atualizada no AsyncStorage\r\n+      await salvarServicos(newList);\r\n+\r\n+      // Se o serviço removido era o que estava selecionado, limpa a seleção\r\n+      if (servico === servicoParaRemover) setServico('');\r\n+    });\r\n+\r\n+    setActionAlertVisible(true);\r\n+  };\r\n+\r\n+\r\n+  const selecionarServico = (servicoSelecionado) => {\r\n+    setServico(servicoSelecionado);\r\n+    setModalServicoVisible(false);\r\n+  };\r\n+\r\n+\r\n+  // busca o cep\r\n+  const handleSearchCep = async () => {\r\n+    setLoadingCep(true);\r\n+\r\n+    if (!endereco.cep || endereco.cep.length !== 8) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um CEP válido.' });\r\n+      setAlertVisible(true);\r\n+      setLoadingCep(false);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const resultado = await buscarCep(endereco.cep);\r\n+      if (resultado) {\r\n+        setEndereco(prev => ({ ...prev, ...resultado }));\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({ title: 'Erro', message: error.message });\r\n+      setAlertVisible(true);\r\n+    } finally {\r\n+      setLoadingCep(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+\r\n+  const saveEndereco = () => {\r\n+    const { rua, numero, bairro, cidade, estado, cep } = endereco;\r\n+    if (!rua || !numero || !bairro) {\r\n+      setAlertInfo({ title: 'Erro', message: 'Preencha todos os campos do endereço!' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+    setModalEnderecoVisible(false);\r\n+    setAlertInfo({ title: 'Sucesso', message: 'Endereço salvo!' });\r\n+    setAlertVisible(true);\r\n+\r\n+  };\r\n+\r\n+  const formatTelefone = (text) => {\r\n+    let cleaned = text.replace(/\\D/g, '');\r\n+    if (cleaned.length > 11) cleaned = cleaned.slice(0, 11);\r\n+    if (cleaned.length <= 2) return `(${cleaned}`;\r\n+    if (cleaned.length <= 6) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2)}`;\r\n+    if (cleaned.length <= 10) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7)}`;\r\n+    return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7, 11)}`;\r\n+  };\r\n+\r\n+  const formatValor = (text) => {\r\n+    let cleaned = text.replace(/\\D/g, '');\r\n+    if (!cleaned) return '';\r\n+    let num = parseInt(cleaned, 10);\r\n+    let formatted = (num / 100).toFixed(2);\r\n+    formatted = formatted.replace('.', ',').replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n+    return formatted;\r\n+  };\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.container}>\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => {\r\n+          setAlertVisible(false);\r\n+          if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n+          setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n+        }}\r\n+      />\r\n+      <ScrollView contentContainerStyle={{ paddingBottom: 40 } sh}>\r\n+        <View style={{ alignItems: 'center' }}>\r\n+          <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n+        </View>\r\n+\r\n+        <Text style={styles.label}>Nome do Cliente*</Text>\r\n+        <View style={styles.inputIconRowBox}>\r\n+          <Ionicons name=\"person-outline\" size={20} color={colors.secondary} />\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            value={nomeCliente}\r\n+            onChangeText={setNomeCliente}\r\n+            placeholder=\"Nome completo\"\r\n+            placeholderTextColor={colors.gray}\r\n+          />\r\n+        </View>\r\n+\r\n+        <Text style={styles.label}>Telefone*</Text>\r\n+        <View style={styles.inputIconRowBox}>\r\n+          <Ionicons name=\"call-outline\" size={20} color={colors.secondary} />\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            value={telefone}\r\n+            onChangeText={(text) => setTelefone(formatTelefone(text))}\r\n+            placeholder=\"(00) 00000-0000\"\r\n+            keyboardType=\"phone-pad\"\r\n+            placeholderTextColor={colors.gray}\r\n+          />\r\n+        </View>\r\n+\r\n+        <Text style={styles.label}>Data e Hora*</Text>\r\n+        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setShowDatePicker(true)}>\r\n+          <MaterialIcons name=\"date-range\" size={20} color={colors.secondary} />\r\n+          <Text style={{ color: colors.text }}>{dataHora.toLocaleString('pt-BR')}</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        {showDatePicker && (\r\n+          <DateTimePicker value={dataHora} mode=\"date\" display=\"default\" onChange={onChangeDate} />\r\n+        )}\r\n+        {showTimePicker && (\r\n+          <DateTimePicker value={dataHora} mode=\"time\" display=\"default\" onChange={onChangeTime} />\r\n+        )}\r\n+\r\n+        <Text style={styles.label}>Serviço</Text>\r\n+        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setModalServicoVisible(true)}>\r\n+          <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n+          <View style={{ width: 8 }} />\r\n+          <Text style={{ color: servico ? colors.text : colors.gray }}>{servico || 'Selecione um serviço'}</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        <Text style={styles.label}>Valor (R$)</Text>\r\n+        <View style={styles.inputIconRowBox}>\r\n+          <FontAwesome5 name=\"money-bill-wave\" size={18} color={colors.secondary} />\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            value={valor}\r\n+            onChangeText={(text) => setValor(formatValor(text))}\r\n+            placeholder=\"0,00\"\r\n+            keyboardType=\"numeric\"\r\n+            placeholderTextColor={colors.gray}\r\n+          />\r\n+        </View>\r\n+\r\n+        <TouchableOpacity style={styles.buttonEndereco} onPress={() => setModalEnderecoVisible(true)}>\r\n+          <Ionicons name=\"location-outline\" size={18} color={colors.white} />\r\n+          <Text style={styles.textButtonEndereco}>Cadastrar Endereço</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        {/* Modal de serviços */}\r\n+        <Modal visible={modalServicoVisible} animationType=\"slide\" transparent>\r\n+          <View style={styles.modalContainer}>\r\n+            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n+              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n+                <Text style={styles.headerTitle}>Serviços</Text>\r\n+                <View style={styles.servicoInputRow}>\r\n+                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n+                    <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n+                    <TextInput\r\n+                      style={styles.inputBox}\r\n+                      value={novoServico}\r\n+                      onChangeText={setNovoServico}\r\n+                      placeholder=\"Novo serviço\"\r\n+                      placeholderTextColor={colors.gray}\r\n+                      onSubmitEditing={adicionarServico}\r\n+                      returnKeyType=\"done\"\r\n+                    />\r\n+                  </View>\r\n+                  <TouchableOpacity\r\n+                    style={[styles.buttonAddServico, { marginLeft: 8, height: 48, width: 48, borderRadius: 8, alignItems: 'center', justifyContent: 'center', paddingHorizontal: 0 }]}\r\n+                    onPress={adicionarServico}\r\n+                  >\r\n+                    <MaterialIcons name=\"save\" size={26} color=\"#fff\" />\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+\r\n+                <View style={{ maxHeight: 200 }}>\r\n+                  {servicosExistentes.map((s, idx) => (\r\n+                    <TouchableOpacity key={idx} style={styles.servicoItem} onPress={() => selecionarServico(s)}>\r\n+                      <Text style={{ color: colors.text }}>{s}</Text>\r\n+                      <TouchableOpacity onPress={() => removerServico(idx)}>\r\n+                        <MaterialIcons name=\"delete\" size={22} color={colors.error} style={{ marginLeft: 10 }} />\r\n+                      </TouchableOpacity>\r\n+                    </TouchableOpacity>\r\n+                  ))}\r\n+                </View>\r\n+              </ScrollView>\r\n+              <View style={{ width: '100%', paddingTop: 8 }}>\r\n+                <TouchableOpacity style={[styles.buttonCloseModal, { width: '100%', marginRight: 0, marginTop: 0 }]} onPress={() => setModalServicoVisible(false)}>\r\n+                  <Text style={styles.buttonTextCloseModal}>Fechar</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            </View>\r\n+          </View>\r\n+        </Modal>\r\n+\r\n+        {/* Modal de endereço */}\r\n+        <Modal visible={modalEnderecoVisible} animationType=\"slide\" transparent>\r\n+          <View style={styles.modalContainer}>\r\n+            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n+              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n+                <Text style={styles.modalTitle}>Endereço</Text>\r\n+                <Text style={styles.label}>CEP*</Text>\r\n+                <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>\r\n+                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n+                    <MaterialIcons name=\"location-searching\" size={20} color={colors.secondary} />\r\n+                    <TextInput\r\n+                      style={styles.inputBox}\r\n+                      value={endereco.cep}\r\n+                      onChangeText={cep => setEndereco({ ...endereco, cep })}\r\n+                      placeholder=\"CEP\"\r\n+                      keyboardType=\"numeric\"\r\n+                      placeholderTextColor={colors.gray}\r\n+                    />\r\n+                  </View>\r\n+                  <TouchableOpacity style={styles.buttonBuscarCep} onPress={handleSearchCep}>\r\n+                    {loadingCep ? <ActivityIndicator color=\"#fff\" /> : <MaterialIcons name=\"search\" size={22} color=\"#fff\" />}\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+\r\n+                {['rua', 'numero', 'bairro', 'cidade', 'estado'].map((campo, i) => (\r\n+                  <React.Fragment key={i}>\r\n+                    <Text style={styles.label}>{campo.charAt(0).toUpperCase() + campo.slice(1)}*</Text>\r\n+                    <View style={styles.inputIconRowBox}>\r\n+                      <MaterialIcons name={campo === 'numero' ? 'pin' : campo === 'cidade' ? 'location-city' : 'streetview'} size={20} color={colors.secondary} style={{ marginRight: 8 }} />\r\n+                      <TextInput\r\n+                        style={styles.inputBox}\r\n+                        value={endereco[campo]}\r\n+                        onChangeText={(text) => setEndereco({ ...endereco, [campo]: text })}\r\n+                        placeholder={campo.charAt(0).toUpperCase() + campo.slice(1)}\r\n+                        placeholderTextColor={colors.gray}\r\n+                        keyboardType={campo === 'numero' ? 'numeric' : 'default'}\r\n+                      />\r\n+                    </View>\r\n+                  </React.Fragment>\r\n+                ))}\r\n+\r\n+                <View style={{ flexDirection: 'row', justifyContent: 'flex-end', marginTop: 16 }}>\r\n+                  <TouchableOpacity style={[styles.buttonCloseModal, { flex: 1, marginRight: 8 }]} onPress={() => setModalEnderecoVisible(false)}>\r\n+                    <Text style={styles.buttonTextCloseModal}>Cancelar</Text>\r\n+                  </TouchableOpacity>\r\n+                  <TouchableOpacity style={[styles.buttonSaveModal, { flex: 1 }]} onPress={saveEndereco}>\r\n+                    <Text style={styles.buttonTextSaveModal}>Salvar</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              </ScrollView>\r\n+            </View>\r\n+          </View>\r\n+        </Modal>\r\n+\r\n+        <ActionAlert\r\n+          visible={actionAlertVisible}\r\n+          title={actionAlertInfo.title}\r\n+          message={actionAlertInfo.message}\r\n+          onClose={() => setActionAlertVisible(false)}\r\n+          actions={[\r\n+            { text: \"Cancelar\", onPress: () => setActionAlertVisible(false) },\r\n+            {\r\n+              text: \"Excluir\", destructive: true, onPress: () => {\r\n+                if (typeof onActionAlertConfirm === 'function') onActionAlertConfirm();\r\n+                setActionAlertVisible(false);\r\n+              }\r\n+            },\r\n+          ]}\r\n+        />\r\n+\r\n+      </ScrollView>\r\n+\r\n+      <View style={styles.footerRow}>\r\n+        <TouchableOpacity style={styles.buttonFooterCancel} onPress={() => navigation.goBack()}>\r\n+          <Text style={styles.buttonTextCancel}>Cancelar</Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity style={styles.buttonFooter} onPress={handleSaveAgendamento}>\r\n+          <Text style={styles.buttonTextFooter}>{agendamentoEdit ? 'Salvar' : 'Agendar'}</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+    </KeyboardAvoidingView>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1758723950820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,9 @@\n           if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n           setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n         }}\r\n       />\r\n-      <ScrollView contentContainerStyle={{ paddingBottom: 40 } sh}>\r\n+      <ScrollView contentContainerStyle={{ paddingBottom: 40 } showsVerticalScrollIndicator}>\r\n         <View style={{ alignItems: 'center' }}>\r\n           <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n         </View>\r\n \r\n@@ -448,906 +448,4 @@\n       </View>\r\n     </KeyboardAvoidingView>\r\n   );\r\n }\r\n-import { useFocusEffect } from '@react-navigation/native';\r\n-import React, { useCallback, useContext, useEffect, useState } from 'react';\r\n-import { ActivityIndicator, KeyboardAvoidingView, Modal, Platform, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n-\r\n-import { AuthContext } from '../../contexts/Auth';\r\n-\r\n-import { salvarAgendamento } from '../../services/agendamentoService/agendamentoService';\r\n-import { buscarCep } from '../../services/apiViaCep/apiViaCepService';\r\n-\r\n-import { FontAwesome5, Ionicons, MaterialIcons } from '@expo/vector-icons';\r\n-import { colors } from '../../themes/colors/Colors';\r\n-import styles from './styles';\r\n-\r\n-import DateTimePicker from '@react-native-community/datetimepicker';\r\n-import ActionAlert from '../../components/actionAlert/actionAlert';\r\n-import CustomAlert from '../../components/customAlert/CustomAlert';\r\n-\r\n-import { carregarServicos, salvarServicos } from '../../services/servico/servico';\r\n-\r\n-\r\n-\r\n-\r\n-export default function Agendamentos({ route, navigation }) {\r\n-  const { user } = useContext(AuthContext);\r\n-  const [agendamentoEdit, setAgendamentoEdit] = useState(route?.params?.agendamento || null);\r\n-\r\n-  const [nomeCliente, setNomeCliente] = useState(agendamentoEdit?.nomeCliente || '');\r\n-  const [telefone, setTelefone] = useState(agendamentoEdit?.telefone || '');\r\n-  const [dataHora, setDataHora] = useState(agendamentoEdit?.dataHora ? new Date(agendamentoEdit.dataHora) : new Date());\r\n-  const [servico, setServico] = useState(agendamentoEdit?.servico || '');\r\n-  const [valor, setValor] = useState('');\r\n-  const [endereco, setEndereco] = useState(agendamentoEdit?.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n-  const [status, setStatus] = useState(agendamentoEdit?.status || 'Pendente');\r\n-  const [servicosExistentes, setServicosExistentes] = useState([]);\r\n-  const [novoServico, setNovoServico] = useState('');\r\n-  const [modalServicoVisible, setModalServicoVisible] = useState(false);\r\n-  const [loadingCep, setLoadingCep] = useState(false);\r\n-  const [modalEnderecoVisible, setModalEnderecoVisible] = useState(false);\r\n-  const [showDatePicker, setShowDatePicker] = useState(false);\r\n-  const [showTimePicker, setShowTimePicker] = useState(false);\r\n-\r\n-  const [alertVisible, setAlertVisible] = useState(false);\r\n-  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n-  const [onAlertCloseAction, setOnAlertCloseAction] = useState(null);\r\n-\r\n-  const [actionAlertVisible, setActionAlertVisible] = useState(false);\r\n-  const [actionAlertInfo, setActionAlertInfo] = useState({ title: '', message: '' });\r\n-  const [onActionAlertConfirm, setOnActionAlertConfirm] = useState(null);\r\n-\r\n-  // Limpa os campos do formulário\r\n-  const limparCampos = () => {\r\n-    setNomeCliente('');\r\n-    setTelefone('');\r\n-    setDataHora(new Date());\r\n-    setServico('');\r\n-    setValor('');\r\n-    setEndereco({ rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n-    setStatus('Pendente');\r\n-    setAgendamentoEdit(null);\r\n-  };\r\n-\r\n-  // Efeito que roda toda vez que a tela ganha foco\r\n-  useFocusEffect(\r\n-    useCallback(() => {\r\n-      const agendamentoParam = route.params?.agendamento;\r\n-      if (agendamentoParam) {\r\n-        // Se veio um agendamento para editar, preenche os campos\r\n-        setAgendamentoEdit(agendamentoParam);\r\n-        setNomeCliente(agendamentoParam.nomeCliente || '');\r\n-        setTelefone(agendamentoParam.telefone || '');\r\n-        setDataHora(agendamentoParam.dataHora ? new Date(agendamentoParam.dataHora) : new Date());\r\n-        setServico(agendamentoParam.servico || '');\r\n-        setEndereco(agendamentoParam.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n-        setStatus(agendamentoParam.status || 'Pendente');\r\n-        setValor(agendamentoParam.valor ? formatValor(String(agendamentoParam.valor).replace(/\\D/g, '')) : '');\r\n-      } else {\r\n-        // Se não veio parâmetro, limpa tudo para garantir que é uma nova criação\r\n-        limparCampos();\r\n-      }\r\n-    }, [route.params?.agendamento])\r\n-  );\r\n-\r\n-  useEffect(() => {\r\n-    async function loadServicos() {\r\n-      // Carrega os serviços salvos no AsyncStorage\r\n-      const servicosSalvos = await carregarServicos();\r\n-      setServicosExistentes(servicosSalvos);\r\n-    }\r\n-    loadServicos(); // Chama a função para carregar os serviços quando o componente é montado\r\n-  }, []);\r\n-\r\n-  const handleSaveAgendamento = async () => {\r\n-    if (!nomeCliente || !telefone || !dataHora) {\r\n-      setAlertInfo({ title: 'Atenção', message: 'Por favor, preencha todos os campos.' });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-    try {\r\n-      await salvarAgendamento({ nomeCliente, telefone, dataHora, servico, valor, endereco, status, uid: user.uid }, agendamentoEdit?.id);\r\n-      setAlertInfo({ title: \"Sucesso\", message: `Agendamento ${agendamentoEdit ? 'atualizado' : 'cadastrado'}!` });\r\n-      setOnAlertCloseAction(() => () => {\r\n-        limparCampos();\r\n-        navigation.goBack();\r\n-      });\r\n-      setAlertVisible(true);\r\n-    } catch (error) {\r\n-      setAlertInfo({ title: \"Erro\", message: \"Não foi possível salvar o agendamento. Tente novamente.\" });\r\n-      setAlertVisible(true);\r\n-    }\r\n-  };\r\n-\r\n-  const onChangeDate = (event, selectedDate) => {\r\n-    setShowDatePicker(false);\r\n-    if (event.type === 'dismissed') return;\r\n-    const currentDate = selectedDate || dataHora;\r\n-    setDataHora(currentDate);\r\n-    if (Platform.OS === 'android') setShowTimePicker(true);\r\n-  };\r\n-\r\n-  const onChangeTime = (event, selectedTime) => {\r\n-    setShowTimePicker(false);\r\n-    if (event.type === 'dismissed') return;\r\n-    const updatedDateTime = new Date(dataHora);\r\n-    updatedDateTime.setHours(selectedTime.getHours());\r\n-    updatedDateTime.setMinutes(selectedTime.getMinutes());\r\n-    setDataHora(updatedDateTime);\r\n-  };\r\n-\r\n-  const adicionarServico = async () => {\r\n-    const servicoParaAdicionar = novoServico.trim();\r\n-\r\n-    if (!servicoParaAdicionar) {\r\n-      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um serviço!' });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-\r\n-    // Verifica se o serviço já existe (ignorando maiúsculas/minúsculas)\r\n-    if (servicosExistentes.some(s => s.toLowerCase() === servicoParaAdicionar.toLowerCase())) {\r\n-      setAlertInfo({ title: 'Atenção', message: 'Este serviço já foi adicionado.' });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-\r\n-    const newList = [...servicosExistentes, servicoParaAdicionar];\r\n-    setServicosExistentes(newList);\r\n-\r\n-    // Salva a lista completa no AsyncStorage\r\n-    await salvarServicos(newList);\r\n-\r\n-    setServico(servicoParaAdicionar);\r\n-    setNovoServico('');\r\n-    setModalServicoVisible(false);\r\n-  };\r\n-\r\n-\r\n-  const removerServico = (index) => {\r\n-    const servicoParaRemover = servicosExistentes[index];\r\n-    if (!servicoParaRemover) return;\r\n-\r\n-    setActionAlertInfo({ title: 'Excluir Serviço', message: `Tem certeza que deseja excluir \"${servicoParaRemover}\"?` });\r\n-\r\n-    // Define a função que será executada ao confirmar a exclusão\r\n-    setOnActionAlertConfirm(() => async () => {\r\n-      const newList = servicosExistentes.filter((_, i) => i !== index);\r\n-      setServicosExistentes(newList);\r\n-\r\n-      // Salva a lista atualizada no AsyncStorage\r\n-      await salvarServicos(newList);\r\n-\r\n-      // Se o serviço removido era o que estava selecionado, limpa a seleção\r\n-      if (servico === servicoParaRemover) setServico('');\r\n-    });\r\n-\r\n-    setActionAlertVisible(true);\r\n-  };\r\n-\r\n-\r\n-  const selecionarServico = (servicoSelecionado) => {\r\n-    setServico(servicoSelecionado);\r\n-    setModalServicoVisible(false);\r\n-  };\r\n-\r\n-\r\n-  // busca o cep\r\n-  const handleSearchCep = async () => {\r\n-    setLoadingCep(true);\r\n-\r\n-    if (!endereco.cep || endereco.cep.length !== 8) {\r\n-      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um CEP válido.' });\r\n-      setAlertVisible(true);\r\n-      setLoadingCep(false);\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const resultado = await buscarCep(endereco.cep);\r\n-      if (resultado) {\r\n-        setEndereco(prev => ({ ...prev, ...resultado }));\r\n-      }\r\n-    } catch (error) {\r\n-      setAlertInfo({ title: 'Erro', message: error.message });\r\n-      setAlertVisible(true);\r\n-    } finally {\r\n-      setLoadingCep(false);\r\n-    }\r\n-  };\r\n-\r\n-\r\n-\r\n-  const saveEndereco = () => {\r\n-    const { rua, numero, bairro, cidade, estado, cep } = endereco;\r\n-    if (!rua || !numero || !bairro) {\r\n-      setAlertInfo({ title: 'Erro', message: 'Preencha todos os campos do endereço!' });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-    setModalEnderecoVisible(false);\r\n-    setAlertInfo({ title: 'Sucesso', message: 'Endereço salvo!' });\r\n-    setAlertVisible(true);\r\n-\r\n-  };\r\n-\r\n-  const formatTelefone = (text) => {\r\n-    let cleaned = text.replace(/\\D/g, '');\r\n-    if (cleaned.length > 11) cleaned = cleaned.slice(0, 11);\r\n-    if (cleaned.length <= 2) return `(${cleaned}`;\r\n-    if (cleaned.length <= 6) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2)}`;\r\n-    if (cleaned.length <= 10) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7)}`;\r\n-    return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7, 11)}`;\r\n-  };\r\n-\r\n-  const formatValor = (text) => {\r\n-    let cleaned = text.replace(/\\D/g, '');\r\n-    if (!cleaned) return '';\r\n-    let num = parseInt(cleaned, 10);\r\n-    let formatted = (num / 100).toFixed(2);\r\n-    formatted = formatted.replace('.', ',').replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n-    return formatted;\r\n-  };\r\n-\r\n-  return (\r\n-    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.container}>\r\n-      <CustomAlert\r\n-        visible={alertVisible}\r\n-        title={alertInfo.title}\r\n-        message={alertInfo.message}\r\n-        onClose={() => {\r\n-          setAlertVisible(false);\r\n-          if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n-          setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n-        }}\r\n-      />\r\n-      <ScrollView contentContainerStyle={{ paddingBottom: 40 } }>\r\n-        <View style={{ alignItems: 'center' }}>\r\n-          <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n-        </View>\r\n-\r\n-        <Text style={styles.label}>Nome do Cliente*</Text>\r\n-        <View style={styles.inputIconRowBox}>\r\n-          <Ionicons name=\"person-outline\" size={20} color={colors.secondary} />\r\n-          <TextInput\r\n-            style={styles.inputBox}\r\n-            value={nomeCliente}\r\n-            onChangeText={setNomeCliente}\r\n-            placeholder=\"Nome completo\"\r\n-            placeholderTextColor={colors.gray}\r\n-          />\r\n-        </View>\r\n-\r\n-        <Text style={styles.label}>Telefone*</Text>\r\n-        <View style={styles.inputIconRowBox}>\r\n-          <Ionicons name=\"call-outline\" size={20} color={colors.secondary} />\r\n-          <TextInput\r\n-            style={styles.inputBox}\r\n-            value={telefone}\r\n-            onChangeText={(text) => setTelefone(formatTelefone(text))}\r\n-            placeholder=\"(00) 00000-0000\"\r\n-            keyboardType=\"phone-pad\"\r\n-            placeholderTextColor={colors.gray}\r\n-          />\r\n-        </View>\r\n-\r\n-        <Text style={styles.label}>Data e Hora*</Text>\r\n-        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setShowDatePicker(true)}>\r\n-          <MaterialIcons name=\"date-range\" size={20} color={colors.secondary} />\r\n-          <Text style={{ color: colors.text }}>{dataHora.toLocaleString('pt-BR')}</Text>\r\n-        </TouchableOpacity>\r\n-\r\n-        {showDatePicker && (\r\n-          <DateTimePicker value={dataHora} mode=\"date\" display=\"default\" onChange={onChangeDate} />\r\n-        )}\r\n-        {showTimePicker && (\r\n-          <DateTimePicker value={dataHora} mode=\"time\" display=\"default\" onChange={onChangeTime} />\r\n-        )}\r\n-\r\n-        <Text style={styles.label}>Serviço</Text>\r\n-        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setModalServicoVisible(true)}>\r\n-          <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n-          <View style={{ width: 8 }} />\r\n-          <Text style={{ color: servico ? colors.text : colors.gray }}>{servico || 'Selecione um serviço'}</Text>\r\n-        </TouchableOpacity>\r\n-\r\n-        <Text style={styles.label}>Valor (R$)</Text>\r\n-        <View style={styles.inputIconRowBox}>\r\n-          <FontAwesome5 name=\"money-bill-wave\" size={18} color={colors.secondary} />\r\n-          <TextInput\r\n-            style={styles.inputBox}\r\n-            value={valor}\r\n-            onChangeText={(text) => setValor(formatValor(text))}\r\n-            placeholder=\"0,00\"\r\n-            keyboardType=\"numeric\"\r\n-            placeholderTextColor={colors.gray}\r\n-          />\r\n-        </View>\r\n-\r\n-        <TouchableOpacity style={styles.buttonEndereco} onPress={() => setModalEnderecoVisible(true)}>\r\n-          <Ionicons name=\"location-outline\" size={18} color={colors.white} />\r\n-          <Text style={styles.textButtonEndereco}>Cadastrar Endereço</Text>\r\n-        </TouchableOpacity>\r\n-\r\n-        {/* Modal de serviços */}\r\n-        <Modal visible={modalServicoVisible} animationType=\"slide\" transparent>\r\n-          <View style={styles.modalContainer}>\r\n-            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n-              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n-                <Text style={styles.headerTitle}>Serviços</Text>\r\n-                <View style={styles.servicoInputRow}>\r\n-                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n-                    <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n-                    <TextInput\r\n-                      style={styles.inputBox}\r\n-                      value={novoServico}\r\n-                      onChangeText={setNovoServico}\r\n-                      placeholder=\"Novo serviço\"\r\n-                      placeholderTextColor={colors.gray}\r\n-                      onSubmitEditing={adicionarServico}\r\n-                      returnKeyType=\"done\"\r\n-                    />\r\n-                  </View>\r\n-                  <TouchableOpacity\r\n-                    style={[styles.buttonAddServico, { marginLeft: 8, height: 48, width: 48, borderRadius: 8, alignItems: 'center', justifyContent: 'center', paddingHorizontal: 0 }]}\r\n-                    onPress={adicionarServico}\r\n-                  >\r\n-                    <MaterialIcons name=\"save\" size={26} color=\"#fff\" />\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-\r\n-                <View style={{ maxHeight: 200 }}>\r\n-                  {servicosExistentes.map((s, idx) => (\r\n-                    <TouchableOpacity key={idx} style={styles.servicoItem} onPress={() => selecionarServico(s)}>\r\n-                      <Text style={{ color: colors.text }}>{s}</Text>\r\n-                      <TouchableOpacity onPress={() => removerServico(idx)}>\r\n-                        <MaterialIcons name=\"delete\" size={22} color={colors.error} style={{ marginLeft: 10 }} />\r\n-                      </TouchableOpacity>\r\n-                    </TouchableOpacity>\r\n-                  ))}\r\n-                </View>\r\n-              </ScrollView>\r\n-              <View style={{ width: '100%', paddingTop: 8 }}>\r\n-                <TouchableOpacity style={[styles.buttonCloseModal, { width: '100%', marginRight: 0, marginTop: 0 }]} onPress={() => setModalServicoVisible(false)}>\r\n-                  <Text style={styles.buttonTextCloseModal}>Fechar</Text>\r\n-                </TouchableOpacity>\r\n-              </View>\r\n-            </View>\r\n-          </View>\r\n-        </Modal>\r\n-\r\n-        {/* Modal de endereço */}\r\n-        <Modal visible={modalEnderecoVisible} animationType=\"slide\" transparent>\r\n-          <View style={styles.modalContainer}>\r\n-            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n-              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n-                <Text style={styles.modalTitle}>Endereço</Text>\r\n-                <Text style={styles.label}>CEP*</Text>\r\n-                <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>\r\n-                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n-                    <MaterialIcons name=\"location-searching\" size={20} color={colors.secondary} />\r\n-                    <TextInput\r\n-                      style={styles.inputBox}\r\n-                      value={endereco.cep}\r\n-                      onChangeText={cep => setEndereco({ ...endereco, cep })}\r\n-                      placeholder=\"CEP\"\r\n-                      keyboardType=\"numeric\"\r\n-                      placeholderTextColor={colors.gray}\r\n-                    />\r\n-                  </View>\r\n-                  <TouchableOpacity style={styles.buttonBuscarCep} onPress={handleSearchCep}>\r\n-                    {loadingCep ? <ActivityIndicator color=\"#fff\" /> : <MaterialIcons name=\"search\" size={22} color=\"#fff\" />}\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-\r\n-                {['rua', 'numero', 'bairro', 'cidade', 'estado'].map((campo, i) => (\r\n-                  <React.Fragment key={i}>\r\n-                    <Text style={styles.label}>{campo.charAt(0).toUpperCase() + campo.slice(1)}*</Text>\r\n-                    <View style={styles.inputIconRowBox}>\r\n-                      <MaterialIcons name={campo === 'numero' ? 'pin' : campo === 'cidade' ? 'location-city' : 'streetview'} size={20} color={colors.secondary} style={{ marginRight: 8 }} />\r\n-                      <TextInput\r\n-                        style={styles.inputBox}\r\n-                        value={endereco[campo]}\r\n-                        onChangeText={(text) => setEndereco({ ...endereco, [campo]: text })}\r\n-                        placeholder={campo.charAt(0).toUpperCase() + campo.slice(1)}\r\n-                        placeholderTextColor={colors.gray}\r\n-                        keyboardType={campo === 'numero' ? 'numeric' : 'default'}\r\n-                      />\r\n-                    </View>\r\n-                  </React.Fragment>\r\n-                ))}\r\n-\r\n-                <View style={{ flexDirection: 'row', justifyContent: 'flex-end', marginTop: 16 }}>\r\n-                  <TouchableOpacity style={[styles.buttonCloseModal, { flex: 1, marginRight: 8 }]} onPress={() => setModalEnderecoVisible(false)}>\r\n-                    <Text style={styles.buttonTextCloseModal}>Cancelar</Text>\r\n-                  </TouchableOpacity>\r\n-                  <TouchableOpacity style={[styles.buttonSaveModal, { flex: 1 }]} onPress={saveEndereco}>\r\n-                    <Text style={styles.buttonTextSaveModal}>Salvar</Text>\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-              </ScrollView>\r\n-            </View>\r\n-          </View>\r\n-        </Modal>\r\n-\r\n-        <ActionAlert\r\n-          visible={actionAlertVisible}\r\n-          title={actionAlertInfo.title}\r\n-          message={actionAlertInfo.message}\r\n-          onClose={() => setActionAlertVisible(false)}\r\n-          actions={[\r\n-            { text: \"Cancelar\", onPress: () => setActionAlertVisible(false) },\r\n-            {\r\n-              text: \"Excluir\", destructive: true, onPress: () => {\r\n-                if (typeof onActionAlertConfirm === 'function') onActionAlertConfirm();\r\n-                setActionAlertVisible(false);\r\n-              }\r\n-            },\r\n-          ]}\r\n-        />\r\n-\r\n-      </ScrollView>\r\n-\r\n-      <View style={styles.footerRow}>\r\n-        <TouchableOpacity style={styles.buttonFooterCancel} onPress={() => navigation.goBack()}>\r\n-          <Text style={styles.buttonTextCancel}>Cancelar</Text>\r\n-        </TouchableOpacity>\r\n-        <TouchableOpacity style={styles.buttonFooter} onPress={handleSaveAgendamento}>\r\n-          <Text style={styles.buttonTextFooter}>{agendamentoEdit ? 'Salvar' : 'Agendar'}</Text>\r\n-        </TouchableOpacity>\r\n-      </View>\r\n-    </KeyboardAvoidingView>\r\n-  );\r\n-}\r\n-import { useFocusEffect } from '@react-navigation/native';\r\n-import React, { useCallback, useContext, useEffect, useState } from 'react';\r\n-import { ActivityIndicator, KeyboardAvoidingView, Modal, Platform, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n-\r\n-import { AuthContext } from '../../contexts/Auth';\r\n-\r\n-import { salvarAgendamento } from '../../services/agendamentoService/agendamentoService';\r\n-import { buscarCep } from '../../services/apiViaCep/apiViaCepService';\r\n-\r\n-import { FontAwesome5, Ionicons, MaterialIcons } from '@expo/vector-icons';\r\n-import { colors } from '../../themes/colors/Colors';\r\n-import styles from './styles';\r\n-\r\n-import DateTimePicker from '@react-native-community/datetimepicker';\r\n-import ActionAlert from '../../components/actionAlert/actionAlert';\r\n-import CustomAlert from '../../components/customAlert/CustomAlert';\r\n-\r\n-import { carregarServicos, salvarServicos } from '../../services/servico/servico';\r\n-\r\n-\r\n-\r\n-\r\n-export default function Agendamentos({ route, navigation }) {\r\n-  const { user } = useContext(AuthContext);\r\n-  const [agendamentoEdit, setAgendamentoEdit] = useState(route?.params?.agendamento || null);\r\n-\r\n-  const [nomeCliente, setNomeCliente] = useState(agendamentoEdit?.nomeCliente || '');\r\n-  const [telefone, setTelefone] = useState(agendamentoEdit?.telefone || '');\r\n-  const [dataHora, setDataHora] = useState(agendamentoEdit?.dataHora ? new Date(agendamentoEdit.dataHora) : new Date());\r\n-  const [servico, setServico] = useState(agendamentoEdit?.servico || '');\r\n-  const [valor, setValor] = useState('');\r\n-  const [endereco, setEndereco] = useState(agendamentoEdit?.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n-  const [status, setStatus] = useState(agendamentoEdit?.status || 'Pendente');\r\n-  const [servicosExistentes, setServicosExistentes] = useState([]);\r\n-  const [novoServico, setNovoServico] = useState('');\r\n-  const [modalServicoVisible, setModalServicoVisible] = useState(false);\r\n-  const [loadingCep, setLoadingCep] = useState(false);\r\n-  const [modalEnderecoVisible, setModalEnderecoVisible] = useState(false);\r\n-  const [showDatePicker, setShowDatePicker] = useState(false);\r\n-  const [showTimePicker, setShowTimePicker] = useState(false);\r\n-\r\n-  const [alertVisible, setAlertVisible] = useState(false);\r\n-  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n-  const [onAlertCloseAction, setOnAlertCloseAction] = useState(null);\r\n-\r\n-  const [actionAlertVisible, setActionAlertVisible] = useState(false);\r\n-  const [actionAlertInfo, setActionAlertInfo] = useState({ title: '', message: '' });\r\n-  const [onActionAlertConfirm, setOnActionAlertConfirm] = useState(null);\r\n-\r\n-  // Limpa os campos do formulário\r\n-  const limparCampos = () => {\r\n-    setNomeCliente('');\r\n-    setTelefone('');\r\n-    setDataHora(new Date());\r\n-    setServico('');\r\n-    setValor('');\r\n-    setEndereco({ rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n-    setStatus('Pendente');\r\n-    setAgendamentoEdit(null);\r\n-  };\r\n-\r\n-  // Efeito que roda toda vez que a tela ganha foco\r\n-  useFocusEffect(\r\n-    useCallback(() => {\r\n-      const agendamentoParam = route.params?.agendamento;\r\n-      if (agendamentoParam) {\r\n-        // Se veio um agendamento para editar, preenche os campos\r\n-        setAgendamentoEdit(agendamentoParam);\r\n-        setNomeCliente(agendamentoParam.nomeCliente || '');\r\n-        setTelefone(agendamentoParam.telefone || '');\r\n-        setDataHora(agendamentoParam.dataHora ? new Date(agendamentoParam.dataHora) : new Date());\r\n-        setServico(agendamentoParam.servico || '');\r\n-        setEndereco(agendamentoParam.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n-        setStatus(agendamentoParam.status || 'Pendente');\r\n-        setValor(agendamentoParam.valor ? formatValor(String(agendamentoParam.valor).replace(/\\D/g, '')) : '');\r\n-      } else {\r\n-        // Se não veio parâmetro, limpa tudo para garantir que é uma nova criação\r\n-        limparCampos();\r\n-      }\r\n-    }, [route.params?.agendamento])\r\n-  );\r\n-\r\n-  useEffect(() => {\r\n-    async function loadServicos() {\r\n-      // Carrega os serviços salvos no AsyncStorage\r\n-      const servicosSalvos = await carregarServicos();\r\n-      setServicosExistentes(servicosSalvos);\r\n-    }\r\n-    loadServicos(); // Chama a função para carregar os serviços quando o componente é montado\r\n-  }, []);\r\n-\r\n-  const handleSaveAgendamento = async () => {\r\n-    if (!nomeCliente || !telefone || !dataHora) {\r\n-      setAlertInfo({ title: 'Atenção', message: 'Por favor, preencha todos os campos.' });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-    try {\r\n-      await salvarAgendamento({ nomeCliente, telefone, dataHora, servico, valor, endereco, status, uid: user.uid }, agendamentoEdit?.id);\r\n-      setAlertInfo({ title: \"Sucesso\", message: `Agendamento ${agendamentoEdit ? 'atualizado' : 'cadastrado'}!` });\r\n-      setOnAlertCloseAction(() => () => {\r\n-        limparCampos();\r\n-        navigation.goBack();\r\n-      });\r\n-      setAlertVisible(true);\r\n-    } catch (error) {\r\n-      setAlertInfo({ title: \"Erro\", message: \"Não foi possível salvar o agendamento. Tente novamente.\" });\r\n-      setAlertVisible(true);\r\n-    }\r\n-  };\r\n-\r\n-  const onChangeDate = (event, selectedDate) => {\r\n-    setShowDatePicker(false);\r\n-    if (event.type === 'dismissed') return;\r\n-    const currentDate = selectedDate || dataHora;\r\n-    setDataHora(currentDate);\r\n-    if (Platform.OS === 'android') setShowTimePicker(true);\r\n-  };\r\n-\r\n-  const onChangeTime = (event, selectedTime) => {\r\n-    setShowTimePicker(false);\r\n-    if (event.type === 'dismissed') return;\r\n-    const updatedDateTime = new Date(dataHora);\r\n-    updatedDateTime.setHours(selectedTime.getHours());\r\n-    updatedDateTime.setMinutes(selectedTime.getMinutes());\r\n-    setDataHora(updatedDateTime);\r\n-  };\r\n-\r\n-  const adicionarServico = async () => {\r\n-    const servicoParaAdicionar = novoServico.trim();\r\n-\r\n-    if (!servicoParaAdicionar) {\r\n-      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um serviço!' });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-\r\n-    // Verifica se o serviço já existe (ignorando maiúsculas/minúsculas)\r\n-    if (servicosExistentes.some(s => s.toLowerCase() === servicoParaAdicionar.toLowerCase())) {\r\n-      setAlertInfo({ title: 'Atenção', message: 'Este serviço já foi adicionado.' });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-\r\n-    const newList = [...servicosExistentes, servicoParaAdicionar];\r\n-    setServicosExistentes(newList);\r\n-\r\n-    // Salva a lista completa no AsyncStorage\r\n-    await salvarServicos(newList);\r\n-\r\n-    setServico(servicoParaAdicionar);\r\n-    setNovoServico('');\r\n-    setModalServicoVisible(false);\r\n-  };\r\n-\r\n-\r\n-  const removerServico = (index) => {\r\n-    const servicoParaRemover = servicosExistentes[index];\r\n-    if (!servicoParaRemover) return;\r\n-\r\n-    setActionAlertInfo({ title: 'Excluir Serviço', message: `Tem certeza que deseja excluir \"${servicoParaRemover}\"?` });\r\n-\r\n-    // Define a função que será executada ao confirmar a exclusão\r\n-    setOnActionAlertConfirm(() => async () => {\r\n-      const newList = servicosExistentes.filter((_, i) => i !== index);\r\n-      setServicosExistentes(newList);\r\n-\r\n-      // Salva a lista atualizada no AsyncStorage\r\n-      await salvarServicos(newList);\r\n-\r\n-      // Se o serviço removido era o que estava selecionado, limpa a seleção\r\n-      if (servico === servicoParaRemover) setServico('');\r\n-    });\r\n-\r\n-    setActionAlertVisible(true);\r\n-  };\r\n-\r\n-\r\n-  const selecionarServico = (servicoSelecionado) => {\r\n-    setServico(servicoSelecionado);\r\n-    setModalServicoVisible(false);\r\n-  };\r\n-\r\n-\r\n-  // busca o cep\r\n-  const handleSearchCep = async () => {\r\n-    setLoadingCep(true);\r\n-\r\n-    if (!endereco.cep || endereco.cep.length !== 8) {\r\n-      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um CEP válido.' });\r\n-      setAlertVisible(true);\r\n-      setLoadingCep(false);\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const resultado = await buscarCep(endereco.cep);\r\n-      if (resultado) {\r\n-        setEndereco(prev => ({ ...prev, ...resultado }));\r\n-      }\r\n-    } catch (error) {\r\n-      setAlertInfo({ title: 'Erro', message: error.message });\r\n-      setAlertVisible(true);\r\n-    } finally {\r\n-      setLoadingCep(false);\r\n-    }\r\n-  };\r\n-\r\n-\r\n-\r\n-  const saveEndereco = () => {\r\n-    const { rua, numero, bairro, cidade, estado, cep } = endereco;\r\n-    if (!rua || !numero || !bairro) {\r\n-      setAlertInfo({ title: 'Erro', message: 'Preencha todos os campos do endereço!' });\r\n-      setAlertVisible(true);\r\n-      return;\r\n-    }\r\n-    setModalEnderecoVisible(false);\r\n-    setAlertInfo({ title: 'Sucesso', message: 'Endereço salvo!' });\r\n-    setAlertVisible(true);\r\n-\r\n-  };\r\n-\r\n-  const formatTelefone = (text) => {\r\n-    let cleaned = text.replace(/\\D/g, '');\r\n-    if (cleaned.length > 11) cleaned = cleaned.slice(0, 11);\r\n-    if (cleaned.length <= 2) return `(${cleaned}`;\r\n-    if (cleaned.length <= 6) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2)}`;\r\n-    if (cleaned.length <= 10) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7)}`;\r\n-    return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7, 11)}`;\r\n-  };\r\n-\r\n-  const formatValor = (text) => {\r\n-    let cleaned = text.replace(/\\D/g, '');\r\n-    if (!cleaned) return '';\r\n-    let num = parseInt(cleaned, 10);\r\n-    let formatted = (num / 100).toFixed(2);\r\n-    formatted = formatted.replace('.', ',').replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n-    return formatted;\r\n-  };\r\n-\r\n-  return (\r\n-    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.container}>\r\n-      <CustomAlert\r\n-        visible={alertVisible}\r\n-        title={alertInfo.title}\r\n-        message={alertInfo.message}\r\n-        onClose={() => {\r\n-          setAlertVisible(false);\r\n-          if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n-          setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n-        }}\r\n-      /> \r\n-      <ScrollView contentContainerStyle={{ paddingBottom: 40 }}>\r\n-        <View style={{ alignItems: 'center' }}>\r\n-          <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n-        </View>\r\n-\r\n-        <Text style={styles.label}>Nome do Cliente*</Text>\r\n-        <View style={styles.inputIconRowBox}>\r\n-          <Ionicons name=\"person-outline\" size={20} color={colors.secondary} />\r\n-          <TextInput\r\n-            style={styles.inputBox}\r\n-            value={nomeCliente}\r\n-            onChangeText={setNomeCliente}\r\n-            placeholder=\"Nome completo\"\r\n-            placeholderTextColor={colors.gray}\r\n-          />\r\n-        </View>\r\n-\r\n-        <Text style={styles.label}>Telefone*</Text>\r\n-        <View style={styles.inputIconRowBox}>\r\n-          <Ionicons name=\"call-outline\" size={20} color={colors.secondary} />\r\n-          <TextInput\r\n-            style={styles.inputBox}\r\n-            value={telefone}\r\n-            onChangeText={(text) => setTelefone(formatTelefone(text))}\r\n-            placeholder=\"(00) 00000-0000\"\r\n-            keyboardType=\"phone-pad\"\r\n-            placeholderTextColor={colors.gray}\r\n-          />\r\n-        </View>\r\n-\r\n-        <Text style={styles.label}>Data e Hora*</Text>\r\n-        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setShowDatePicker(true)}>\r\n-          <MaterialIcons name=\"date-range\" size={20} color={colors.secondary} />\r\n-          <Text style={{ color: colors.text }}>{dataHora.toLocaleString('pt-BR')}</Text>\r\n-        </TouchableOpacity>\r\n-\r\n-        {showDatePicker && (\r\n-          <DateTimePicker value={dataHora} mode=\"date\" display=\"default\" onChange={onChangeDate} />\r\n-        )}\r\n-        {showTimePicker && (\r\n-          <DateTimePicker value={dataHora} mode=\"time\" display=\"default\" onChange={onChangeTime} />\r\n-        )}\r\n-\r\n-        <Text style={styles.label}>Serviço</Text>\r\n-        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setModalServicoVisible(true)}>\r\n-          <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n-          <View style={{ width: 8 }} />\r\n-          <Text style={{ color: servico ? colors.text : colors.gray }}>{servico || 'Selecione um serviço'}</Text>\r\n-        </TouchableOpacity>\r\n-\r\n-        <Text style={styles.label}>Valor (R$)</Text>\r\n-        <View style={styles.inputIconRowBox}>\r\n-          <FontAwesome5 name=\"money-bill-wave\" size={18} color={colors.secondary} />\r\n-          <TextInput\r\n-            style={styles.inputBox}\r\n-            value={valor}\r\n-            onChangeText={(text) => setValor(formatValor(text))}\r\n-            placeholder=\"0,00\"\r\n-            keyboardType=\"numeric\"\r\n-            placeholderTextColor={colors.gray}\r\n-          />\r\n-        </View>\r\n-\r\n-        <TouchableOpacity style={styles.buttonEndereco} onPress={() => setModalEnderecoVisible(true)}>\r\n-          <Ionicons name=\"location-outline\" size={18} color={colors.white} />\r\n-          <Text style={styles.textButtonEndereco}>Cadastrar Endereço</Text>\r\n-        </TouchableOpacity>\r\n-\r\n-        {/* Modal de serviços */}\r\n-        <Modal visible={modalServicoVisible} animationType=\"slide\" transparent>\r\n-          <View style={styles.modalContainer}>\r\n-            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n-              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n-                <Text style={styles.headerTitle}>Serviços</Text>\r\n-                <View style={styles.servicoInputRow}>\r\n-                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n-                    <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n-                    <TextInput\r\n-                      style={styles.inputBox}\r\n-                      value={novoServico}\r\n-                      onChangeText={setNovoServico}\r\n-                      placeholder=\"Novo serviço\"\r\n-                      placeholderTextColor={colors.gray}\r\n-                      onSubmitEditing={adicionarServico}\r\n-                      returnKeyType=\"done\"\r\n-                    />\r\n-                  </View>\r\n-                  <TouchableOpacity\r\n-                    style={[styles.buttonAddServico, { marginLeft: 8, height: 48, width: 48, borderRadius: 8, alignItems: 'center', justifyContent: 'center', paddingHorizontal: 0 }]}\r\n-                    onPress={adicionarServico}\r\n-                  >\r\n-                    <MaterialIcons name=\"save\" size={26} color=\"#fff\" />\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-\r\n-                <View style={{ maxHeight: 200 }}>\r\n-                  {servicosExistentes.map((s, idx) => (\r\n-                    <TouchableOpacity key={idx} style={styles.servicoItem} onPress={() => selecionarServico(s)}>\r\n-                      <Text style={{ color: colors.text }}>{s}</Text>\r\n-                      <TouchableOpacity onPress={() => removerServico(idx)}>\r\n-                        <MaterialIcons name=\"delete\" size={22} color={colors.error} style={{ marginLeft: 10 }} />\r\n-                      </TouchableOpacity>\r\n-                    </TouchableOpacity>\r\n-                  ))}\r\n-                </View>\r\n-              </ScrollView>\r\n-              <View style={{ width: '100%', paddingTop: 8 }}>\r\n-                <TouchableOpacity style={[styles.buttonCloseModal, { width: '100%', marginRight: 0, marginTop: 0 }]} onPress={() => setModalServicoVisible(false)}>\r\n-                  <Text style={styles.buttonTextCloseModal}>Fechar</Text>\r\n-                </TouchableOpacity>\r\n-              </View>\r\n-            </View>\r\n-          </View>\r\n-        </Modal>\r\n-\r\n-        {/* Modal de endereço */}\r\n-        <Modal visible={modalEnderecoVisible} animationType=\"slide\" transparent>\r\n-          <View style={styles.modalContainer}>\r\n-            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n-              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n-                <Text style={styles.modalTitle}>Endereço</Text>\r\n-                <Text style={styles.label}>CEP*</Text>\r\n-                <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>\r\n-                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n-                    <MaterialIcons name=\"location-searching\" size={20} color={colors.secondary} />\r\n-                    <TextInput\r\n-                      style={styles.inputBox}\r\n-                      value={endereco.cep}\r\n-                      onChangeText={cep => setEndereco({ ...endereco, cep })}\r\n-                      placeholder=\"CEP\"\r\n-                      keyboardType=\"numeric\"\r\n-                      placeholderTextColor={colors.gray}\r\n-                    />\r\n-                  </View>\r\n-                  <TouchableOpacity style={styles.buttonBuscarCep} onPress={handleSearchCep}>\r\n-                    {loadingCep ? <ActivityIndicator color=\"#fff\" /> : <MaterialIcons name=\"search\" size={22} color=\"#fff\" />}\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-\r\n-                {['rua', 'numero', 'bairro', 'cidade', 'estado'].map((campo, i) => (\r\n-                  <React.Fragment key={i}>\r\n-                    <Text style={styles.label}>{campo.charAt(0).toUpperCase() + campo.slice(1)}*</Text>\r\n-                    <View style={styles.inputIconRowBox}>\r\n-                      <MaterialIcons name={campo === 'numero' ? 'pin' : campo === 'cidade' ? 'location-city' : 'streetview'} size={20} color={colors.secondary} style={{ marginRight: 8 }} />\r\n-                      <TextInput\r\n-                        style={styles.inputBox}\r\n-                        value={endereco[campo]}\r\n-                        onChangeText={(text) => setEndereco({ ...endereco, [campo]: text })}\r\n-                        placeholder={campo.charAt(0).toUpperCase() + campo.slice(1)}\r\n-                        placeholderTextColor={colors.gray}\r\n-                        keyboardType={campo === 'numero' ? 'numeric' : 'default'}\r\n-                      />\r\n-                    </View>\r\n-                  </React.Fragment>\r\n-                ))}\r\n-\r\n-                <View style={{ flexDirection: 'row', justifyContent: 'flex-end', marginTop: 16 }}>\r\n-                  <TouchableOpacity style={[styles.buttonCloseModal, { flex: 1, marginRight: 8 }]} onPress={() => setModalEnderecoVisible(false)}>\r\n-                    <Text style={styles.buttonTextCloseModal}>Cancelar</Text>\r\n-                  </TouchableOpacity>\r\n-                  <TouchableOpacity style={[styles.buttonSaveModal, { flex: 1 }]} onPress={saveEndereco}>\r\n-                    <Text style={styles.buttonTextSaveModal}>Salvar</Text>\r\n-                  </TouchableOpacity>\r\n-                </View>\r\n-              </ScrollView>\r\n-            </View>\r\n-          </View>\r\n-        </Modal>\r\n-\r\n-        <ActionAlert\r\n-          visible={actionAlertVisible}\r\n-          title={actionAlertInfo.title}\r\n-          message={actionAlertInfo.message}\r\n-          onClose={() => setActionAlertVisible(false)}\r\n-          actions={[\r\n-            { text: \"Cancelar\", onPress: () => setActionAlertVisible(false) },\r\n-            {\r\n-              text: \"Excluir\", destructive: true, onPress: () => {\r\n-                if (typeof onActionAlertConfirm === 'function') onActionAlertConfirm();\r\n-                setActionAlertVisible(false);\r\n-              }\r\n-            },\r\n-          ]}\r\n-        />\r\n-\r\n-      </ScrollView>\r\n-\r\n-      <View style={styles.footerRow}>\r\n-        <TouchableOpacity style={styles.buttonFooterCancel} onPress={() => navigation.goBack()}>\r\n-          <Text style={styles.buttonTextCancel}>Cancelar</Text>\r\n-        </TouchableOpacity>\r\n-        <TouchableOpacity style={styles.buttonFooter} onPress={handleSaveAgendamento}>\r\n-          <Text style={styles.buttonTextFooter}>{agendamentoEdit ? 'Salvar' : 'Agendar'}</Text>\r\n-        </TouchableOpacity>\r\n-      </View>\r\n-    </KeyboardAvoidingView>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1758723957740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,9 @@\n           if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n           setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n         }}\r\n       />\r\n-      <ScrollView contentContainerStyle={{ paddingBottom: 40 } showsVerticalScrollIndicator}>\r\n+      <ScrollView contentContainerStyle={{ paddingBottom: 40 } showsVert}>\r\n         <View style={{ alignItems: 'center' }}>\r\n           <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n         </View>\r\n \r\n"
                },
                {
                    "date": 1758723964964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,9 @@\n           if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n           setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n         }}\r\n       />\r\n-      <ScrollView contentContainerStyle={{ paddingBottom: 40 }>\r\n+      <ScrollView contentContainerStyle={{ paddingBottom: 40 } showsVerticalScrollIndicator={false}>\r\n         <View style={{ alignItems: 'center' }}>\r\n           <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n         </View>\r\n \r\n"
                },
                {
                    "date": 1758724107656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,463 @@\n+import { useFocusEffect } from '@react-navigation/native';\r\n+import React, { useCallback, useContext, useEffect, useState } from 'react';\r\n+import { ActivityIndicator, KeyboardAvoidingView, Modal, Platform, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n+\r\n+import { AuthContext } from '../../contexts/Auth';\r\n+\r\n+import { salvarAgendamento } from '../../services/agendamentoService/agendamentoService';\r\n+import { buscarCep } from '../../services/apiViaCep/apiViaCepService';\r\n+\r\n+import { FontAwesome5, Ionicons, MaterialIcons } from '@expo/vector-icons';\r\n+import { colors } from '../../themes/colors/Colors';\r\n+import styles from './styles';\r\n+\r\n+import DateTimePicker from '@react-native-community/datetimepicker';\r\n+import ActionAlert from '../../components/actionAlert/actionAlert';\r\n+import CustomAlert from '../../components/customAlert/CustomAlert';\r\n+\r\n+import { carregarServicos, salvarServicos } from '../../services/servico/servico';\r\n+\r\n+\r\n+\r\n+\r\n+export default function Agendamentos({ route, navigation }) {\r\n+  const { user } = useContext(AuthContext);\r\n+  const [agendamentoEdit, setAgendamentoEdit] = useState(route?.params?.agendamento || null);\r\n+\r\n+  const [nomeCliente, setNomeCliente] = useState(agendamentoEdit?.nomeCliente || '');\r\n+  const [telefone, setTelefone] = useState(agendamentoEdit?.telefone || '');\r\n+  const [dataHora, setDataHora] = useState(agendamentoEdit?.dataHora ? new Date(agendamentoEdit.dataHora) : new Date());\r\n+  const [servico, setServico] = useState(agendamentoEdit?.servico || '');\r\n+  const [valor, setValor] = useState('');\r\n+  const [endereco, setEndereco] = useState(agendamentoEdit?.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n+  const [status, setStatus] = useState(agendamentoEdit?.status || 'Pendente');\r\n+  const [servicosExistentes, setServicosExistentes] = useState([]);\r\n+  const [novoServico, setNovoServico] = useState('');\r\n+  const [modalServicoVisible, setModalServicoVisible] = useState(false);\r\n+  const [loadingCep, setLoadingCep] = useState(false);\r\n+  const [modalEnderecoVisible, setModalEnderecoVisible] = useState(false);\r\n+  const [showDatePicker, setShowDatePicker] = useState(false);\r\n+  const [showTimePicker, setShowTimePicker] = useState(false);\r\n+\r\n+  const [alertVisible, setAlertVisible] = useState(false);\r\n+  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n+  const [onAlertCloseAction, setOnAlertCloseAction] = useState(null);\r\n+\r\n+  const [actionAlertVisible, setActionAlertVisible] = useState(false);\r\n+  const [actionAlertInfo, setActionAlertInfo] = useState({ title: '', message: '' });\r\n+  const [onActionAlertConfirm, setOnActionAlertConfirm] = useState(null);\r\n+\r\n+  // Limpa os campos do formulário\r\n+  const limparCampos = () => {\r\n+    setNomeCliente('');\r\n+    setTelefone('');\r\n+    setDataHora(new Date());\r\n+    setServico('');\r\n+    setValor('');\r\n+    setEndereco({ rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n+    setStatus('Pendente');\r\n+    setAgendamentoEdit(null);\r\n+  };\r\n+\r\n+  // Efeito que roda toda vez que a tela ganha foco\r\n+  useFocusEffect(\r\n+    useCallback(() => {\r\n+      const agendamentoParam = route.params?.agendamento;\r\n+      if (agendamentoParam) {\r\n+        // Se veio um agendamento para editar, preenche os campos\r\n+        setAgendamentoEdit(agendamentoParam);\r\n+        setNomeCliente(agendamentoParam.nomeCliente || '');\r\n+        setTelefone(agendamentoParam.telefone || '');\r\n+        setDataHora(agendamentoParam.dataHora ? new Date(agendamentoParam.dataHora) : new Date());\r\n+        setServico(agendamentoParam.servico || '');\r\n+        setEndereco(agendamentoParam.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n+        setStatus(agendamentoParam.status || 'Pendente');\r\n+        setValor(agendamentoParam.valor ? formatValor(String(agendamentoParam.valor).replace(/\\D/g, '')) : '');\r\n+      } else {\r\n+        // Se não veio parâmetro, limpa tudo para garantir que é uma nova criação\r\n+        limparCampos();\r\n+      }\r\n+    }, [route.params?.agendamento])\r\n+  );\r\n+\r\n+  useEffect(() => {\r\n+    async function loadServicos() {\r\n+      // Carrega os serviços salvos no AsyncStorage\r\n+      const servicosSalvos = await carregarServicos();\r\n+      setServicosExistentes(servicosSalvos);\r\n+    }\r\n+    loadServicos(); // Chama a função para carregar os serviços quando o componente é montado\r\n+  }, []);\r\n+\r\n+  const handleSaveAgendamento = async () => {\r\n+    if (!nomeCliente || !telefone || !dataHora) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Por favor, preencha todos os campos.' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+    try {\r\n+      await salvarAgendamento({ nomeCliente, telefone, dataHora, servico, valor, endereco, status, uid: user.uid }, agendamentoEdit?.id);\r\n+      setAlertInfo({ title: \"Sucesso\", message: `Agendamento ${agendamentoEdit ? 'atualizado' : 'cadastrado'}!` });\r\n+      setOnAlertCloseAction(() => () => {\r\n+        limparCampos();\r\n+        navigation.goBack();\r\n+      });\r\n+      setAlertVisible(true);\r\n+    } catch (error) {\r\n+      setAlertInfo({ title: \"Erro\", message: \"Não foi possível salvar o agendamento. Tente novamente.\" });\r\n+      setAlertVisible(true);\r\n+    }\r\n+  };\r\n+\r\n+  const onChangeDate = (event, selectedDate) => {\r\n+    setShowDatePicker(false);\r\n+    if (event.type === 'dismissed') return;\r\n+    const currentDate = selectedDate || dataHora;\r\n+    setDataHora(currentDate);\r\n+    if (Platform.OS === 'android') setShowTimePicker(true);\r\n+  };\r\n+\r\n+  const onChangeTime = (event, selectedTime) => {\r\n+    setShowTimePicker(false);\r\n+    if (event.type === 'dismissed') return;\r\n+    const updatedDateTime = new Date(dataHora);\r\n+    updatedDateTime.setHours(selectedTime.getHours());\r\n+    updatedDateTime.setMinutes(selectedTime.getMinutes());\r\n+    setDataHora(updatedDateTime);\r\n+  };\r\n+\r\n+  const adicionarServico = async () => {\r\n+    const servicoParaAdicionar = novoServico.trim();\r\n+\r\n+    if (!servicoParaAdicionar) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um serviço!' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    // Verifica se o serviço já existe (ignorando maiúsculas/minúsculas)\r\n+    if (servicosExistentes.some(s => s.toLowerCase() === servicoParaAdicionar.toLowerCase())) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Este serviço já foi adicionado.' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+\r\n+    const newList = [...servicosExistentes, servicoParaAdicionar];\r\n+    setServicosExistentes(newList);\r\n+\r\n+    // Salva a lista completa no AsyncStorage\r\n+    await salvarServicos(newList);\r\n+\r\n+    setServico(servicoParaAdicionar);\r\n+    setNovoServico('');\r\n+    setModalServicoVisible(false);\r\n+  };\r\n+\r\n+\r\n+  const removerServico = (index) => {\r\n+    const servicoParaRemover = servicosExistentes[index];\r\n+    if (!servicoParaRemover) return;\r\n+\r\n+    setActionAlertInfo({ title: 'Excluir Serviço', message: `Tem certeza que deseja excluir \"${servicoParaRemover}\"?` });\r\n+\r\n+    // Define a função que será executada ao confirmar a exclusão\r\n+    setOnActionAlertConfirm(() => async () => {\r\n+      const newList = servicosExistentes.filter((_, i) => i !== index);\r\n+      setServicosExistentes(newList);\r\n+\r\n+      // Salva a lista atualizada no AsyncStorage\r\n+      await salvarServicos(newList);\r\n+\r\n+      // Se o serviço removido era o que estava selecionado, limpa a seleção\r\n+      if (servico === servicoParaRemover) setServico('');\r\n+    });\r\n+\r\n+    setActionAlertVisible(true);\r\n+  };\r\n+\r\n+\r\n+  const selecionarServico = (servicoSelecionado) => {\r\n+    setServico(servicoSelecionado);\r\n+    setModalServicoVisible(false);\r\n+  };\r\n+\r\n+\r\n+  // busca o cep\r\n+  const handleSearchCep = async () => {\r\n+    setLoadingCep(true);\r\n+\r\n+    if (!endereco.cep || endereco.cep.length !== 8) {\r\n+      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um CEP válido.' });\r\n+      setAlertVisible(true);\r\n+      setLoadingCep(false);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const resultado = await buscarCep(endereco.cep);\r\n+      if (resultado) {\r\n+        setEndereco(prev => ({ ...prev, ...resultado }));\r\n+      }\r\n+    } catch (error) {\r\n+      setAlertInfo({ title: 'Erro', message: error.message });\r\n+      setAlertVisible(true);\r\n+    } finally {\r\n+      setLoadingCep(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+\r\n+  const saveEndereco = () => {\r\n+    const { rua, numero, bairro, cidade, estado, cep } = endereco;\r\n+    if (!rua || !numero || !bairro) {\r\n+      setAlertInfo({ title: 'Erro', message: 'Preencha todos os campos do endereço!' });\r\n+      setAlertVisible(true);\r\n+      return;\r\n+    }\r\n+    setModalEnderecoVisible(false);\r\n+    setAlertInfo({ title: 'Sucesso', message: 'Endereço salvo!' });\r\n+    setAlertVisible(true);\r\n+\r\n+  };\r\n+\r\n+  const formatTelefone = (text) => {\r\n+    let cleaned = text.replace(/\\D/g, '');\r\n+    if (cleaned.length > 11) cleaned = cleaned.slice(0, 11);\r\n+    if (cleaned.length <= 2) return `(${cleaned}`;\r\n+    if (cleaned.length <= 6) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2)}`;\r\n+    if (cleaned.length <= 10) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7)}`;\r\n+    return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7, 11)}`;\r\n+  };\r\n+\r\n+  const formatValor = (text) => {\r\n+    let cleaned = text.replace(/\\D/g, '');\r\n+    if (!cleaned) return '';\r\n+    let num = parseInt(cleaned, 10);\r\n+    let formatted = (num / 100).toFixed(2);\r\n+    formatted = formatted.replace('.', ',').replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n+    return formatted;\r\n+  };\r\n+\r\n+  return (\r\n+    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.container}>\r\n+      <CustomAlert\r\n+        visible={alertVisible}\r\n+        title={alertInfo.title}\r\n+        message={alertInfo.message}\r\n+        onClose={() => {\r\n+          setAlertVisible(false);\r\n+          if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n+          setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n+        }}\r\n+      />\r\n+      <ScrollView contentContainerStyle={{ paddingBottom: 40 } }>\r\n+      <View style={{ paddingBottom: 20, paddingHorizontal: 20 }}>\r\n+        <View style={{ alignItems: 'center' }}>\r\n+          <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n+        </View>\r\n+\r\n+        <Text style={styles.label}>Nome do Cliente*</Text>\r\n+        <View style={styles.inputIconRowBox}>\r\n+          <Ionicons name=\"person-outline\" size={20} color={colors.secondary} />\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            value={nomeCliente}\r\n+            onChangeText={setNomeCliente}\r\n+            placeholder=\"Nome completo\"\r\n+            placeholderTextColor={colors.gray}\r\n+          />\r\n+        </View>\r\n+\r\n+        <Text style={styles.label}>Telefone*</Text>\r\n+        <View style={styles.inputIconRowBox}>\r\n+          <Ionicons name=\"call-outline\" size={20} color={colors.secondary} />\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            value={telefone}\r\n+            onChangeText={(text) => setTelefone(formatTelefone(text))}\r\n+            placeholder=\"(00) 00000-0000\"\r\n+            keyboardType=\"phone-pad\"\r\n+            placeholderTextColor={colors.gray}\r\n+          />\r\n+        </View>\r\n+\r\n+        <Text style={styles.label}>Data e Hora*</Text>\r\n+        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setShowDatePicker(true)}>\r\n+          <MaterialIcons name=\"date-range\" size={20} color={colors.secondary} />\r\n+          <Text style={{ color: colors.text }}>{dataHora.toLocaleString('pt-BR')}</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        {showDatePicker && (\r\n+          <DateTimePicker value={dataHora} mode=\"date\" display=\"default\" onChange={onChangeDate} />\r\n+        )}\r\n+        {showTimePicker && (\r\n+          <DateTimePicker value={dataHora} mode=\"time\" display=\"default\" onChange={onChangeTime} />\r\n+        )}\r\n+\r\n+        <Text style={styles.label}>Serviço</Text>\r\n+        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setModalServicoVisible(true)}>\r\n+          <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n+          <View style={{ width: 8 }} />\r\n+          <Text style={{ color: servico ? colors.text : colors.gray }}>{servico || 'Selecione um serviço'}</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        <Text style={styles.label}>Valor (R$)</Text>\r\n+        <View style={styles.inputIconRowBox}>\r\n+          <FontAwesome5 name=\"money-bill-wave\" size={18} color={colors.secondary} />\r\n+          <TextInput\r\n+            style={styles.inputBox}\r\n+            value={valor}\r\n+            onChangeText={(text) => setValor(formatValor(text))}\r\n+            placeholder=\"0,00\"\r\n+            keyboardType=\"numeric\"\r\n+            placeholderTextColor={colors.gray}\r\n+          />\r\n+        </View>\r\n+\r\n+        <TouchableOpacity style={styles.buttonEndereco} onPress={() => setModalEnderecoVisible(true)}>\r\n+          <Ionicons name=\"location-outline\" size={18} color={colors.white} />\r\n+          <Text style={styles.textButtonEndereco}>Cadastrar Endereço</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>\r\n+          <View style={{ flex: 1, marginRight: 8 }}>\r\n+            <Text style={styles.label}>Serviço</Text>\r\n+            <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setModalServicoVisible(true)}>\r\n+              <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n+              <Text style={{ color: servico ? colors.text : colors.gray }}>{servico || 'Selecione um serviço'}</Text>\r\n+            </TouchableOpacity>\r\n+          </View>\r\n+        </View>\r\n+\r\n+        {/* Modal de serviços */}\r\n+        <Modal visible={modalServicoVisible} animationType=\"slide\" transparent>\r\n+          <View style={styles.modalContainer}>\r\n+            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n+              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n+                <Text style={styles.headerTitle}>Serviços</Text>\r\n+                <View style={styles.servicoInputRow}>\r\n+                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n+                    <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n+                    <TextInput\r\n+                      style={styles.inputBox}\r\n+                      value={novoServico}\r\n+                      onChangeText={setNovoServico}\r\n+                      placeholder=\"Novo serviço\"\r\n+                      placeholderTextColor={colors.gray}\r\n+                      onSubmitEditing={adicionarServico}\r\n+                      returnKeyType=\"done\"\r\n+                    />\r\n+                  </View>\r\n+                  <TouchableOpacity\r\n+                    style={[styles.buttonAddServico, { marginLeft: 8, height: 48, width: 48, borderRadius: 8, alignItems: 'center', justifyContent: 'center', paddingHorizontal: 0 }]}\r\n+                    onPress={adicionarServico}\r\n+                  >\r\n+                    <MaterialIcons name=\"save\" size={26} color=\"#fff\" />\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+\r\n+                <View style={{ maxHeight: 200 }}>\r\n+                  {servicosExistentes.map((s, idx) => (\r\n+                    <TouchableOpacity key={idx} style={styles.servicoItem} onPress={() => selecionarServico(s)}>\r\n+                      <Text style={{ color: colors.text }}>{s}</Text>\r\n+                      <TouchableOpacity onPress={() => removerServico(idx)}>\r\n+                        <MaterialIcons name=\"delete\" size={22} color={colors.error} style={{ marginLeft: 10 }} />\r\n+                      </TouchableOpacity>\r\n+                    </TouchableOpacity>\r\n+                  ))}\r\n+                </View>\r\n+              </ScrollView>\r\n+              <View style={{ width: '100%', paddingTop: 8 }}>\r\n+                <TouchableOpacity style={[styles.buttonCloseModal, { width: '100%', marginRight: 0, marginTop: 0 }]} onPress={() => setModalServicoVisible(false)}>\r\n+                  <Text style={styles.buttonTextCloseModal}>Fechar</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            </View>\r\n+          </View>\r\n+        </Modal>\r\n+\r\n+        {/* Modal de endereço */}\r\n+        <Modal visible={modalEnderecoVisible} animationType=\"slide\" transparent>\r\n+          <View style={styles.modalContainer}>\r\n+            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n+              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n+                <Text style={styles.modalTitle}>Endereço</Text>\r\n+                <Text style={styles.label}>CEP*</Text>\r\n+                <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>\r\n+                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n+                    <MaterialIcons name=\"location-searching\" size={20} color={colors.secondary} />\r\n+                    <TextInput\r\n+                      style={styles.inputBox}\r\n+                      value={endereco.cep}\r\n+                      onChangeText={cep => setEndereco({ ...endereco, cep })}\r\n+                      placeholder=\"CEP\"\r\n+                      keyboardType=\"numeric\"\r\n+                      placeholderTextColor={colors.gray}\r\n+                    />\r\n+                  </View>\r\n+                  <TouchableOpacity style={styles.buttonBuscarCep} onPress={handleSearchCep}>\r\n+                    {loadingCep ? <ActivityIndicator color=\"#fff\" /> : <MaterialIcons name=\"search\" size={22} color=\"#fff\" />}\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+\r\n+                {['rua', 'numero', 'bairro', 'cidade', 'estado'].map((campo, i) => (\r\n+                  <React.Fragment key={i}>\r\n+                    <Text style={styles.label}>{campo.charAt(0).toUpperCase() + campo.slice(1)}*</Text>\r\n+                    <View style={styles.inputIconRowBox}>\r\n+                      <MaterialIcons name={campo === 'numero' ? 'pin' : campo === 'cidade' ? 'location-city' : 'streetview'} size={20} color={colors.secondary} style={{ marginRight: 8 }} />\r\n+                      <TextInput\r\n+                        style={styles.inputBox}\r\n+                        value={endereco[campo]}\r\n+                        onChangeText={(text) => setEndereco({ ...endereco, [campo]: text })}\r\n+                        placeholder={campo.charAt(0).toUpperCase() + campo.slice(1)}\r\n+                        placeholderTextColor={colors.gray}\r\n+                        keyboardType={campo === 'numero' ? 'numeric' : 'default'}\r\n+                      />\r\n+                    </View>\r\n+                  </React.Fragment>\r\n+                ))}\r\n+\r\n+                <View style={{ flexDirection: 'row', justifyContent: 'flex-end', marginTop: 16 }}>\r\n+                  <TouchableOpacity style={[styles.buttonCloseModal, { flex: 1, marginRight: 8 }]} onPress={() => setModalEnderecoVisible(false)}>\r\n+                    <Text style={styles.buttonTextCloseModal}>Cancelar</Text>\r\n+                  </TouchableOpacity>\r\n+                  <TouchableOpacity style={[styles.buttonSaveModal, { flex: 1 }]} onPress={saveEndereco}>\r\n+                    <Text style={styles.buttonTextSaveModal}>Salvar</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              </ScrollView>\r\n+            </View>\r\n+          </View>\r\n+        </Modal>\r\n+\r\n+        <ActionAlert\r\n+          visible={actionAlertVisible}\r\n+          title={actionAlertInfo.title}\r\n+          message={actionAlertInfo.message}\r\n+          onClose={() => setActionAlertVisible(false)}\r\n+          actions={[\r\n+            { text: \"Cancelar\", onPress: () => setActionAlertVisible(false) },\r\n+            {\r\n+              text: \"Excluir\", destructive: true, onPress: () => {\r\n+                if (typeof onActionAlertConfirm === 'function') onActionAlertConfirm();\r\n+                setActionAlertVisible(false);\r\n+              }\r\n+            },\r\n+          ]}\r\n+        />\r\n+\r\n+      </ScrollView>\r\n+\r\n+      <View style={styles.footerRow}>\r\n+        <TouchableOpacity style={styles.buttonFooterCancel} onPress={() => navigation.goBack()}>\r\n+          <Text style={styles.buttonTextCancel}>Cancelar</Text>\r\n+        </TouchableOpacity>\r\n+        <TouchableOpacity style={styles.buttonFooter} onPress={handleSaveAgendamento}>\r\n+          <Text style={styles.buttonTextFooter}>{agendamentoEdit ? 'Salvar' : 'Agendar'}</Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+    </KeyboardAvoidingView>\r\n+    </View>\r\n+  );\r\n+}\r\n"
                }
            ],
            "date": 1758723829721,
            "name": "Commit-0",
            "content": "import { useFocusEffect } from '@react-navigation/native';\r\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport { ActivityIndicator, KeyboardAvoidingView, Modal, Platform, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';\r\n\r\nimport { AuthContext } from '../../contexts/Auth';\r\n\r\nimport { salvarAgendamento } from '../../services/agendamentoService/agendamentoService';\r\nimport { buscarCep } from '../../services/apiViaCep/apiViaCepService';\r\n\r\nimport { FontAwesome5, Ionicons, MaterialIcons } from '@expo/vector-icons';\r\nimport { colors } from '../../themes/colors/Colors';\r\nimport styles from './styles';\r\n\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport ActionAlert from '../../components/actionAlert/actionAlert';\r\nimport CustomAlert from '../../components/customAlert/CustomAlert';\r\n\r\nimport { carregarServicos, salvarServicos } from '../../services/servico/servico';\r\n\r\n\r\n\r\n\r\nexport default function Agendamentos({ route, navigation }) {\r\n  const { user } = useContext(AuthContext);\r\n  const [agendamentoEdit, setAgendamentoEdit] = useState(route?.params?.agendamento || null);\r\n\r\n  const [nomeCliente, setNomeCliente] = useState(agendamentoEdit?.nomeCliente || '');\r\n  const [telefone, setTelefone] = useState(agendamentoEdit?.telefone || '');\r\n  const [dataHora, setDataHora] = useState(agendamentoEdit?.dataHora ? new Date(agendamentoEdit.dataHora) : new Date());\r\n  const [servico, setServico] = useState(agendamentoEdit?.servico || '');\r\n  const [valor, setValor] = useState('');\r\n  const [endereco, setEndereco] = useState(agendamentoEdit?.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n  const [status, setStatus] = useState(agendamentoEdit?.status || 'Pendente');\r\n  const [servicosExistentes, setServicosExistentes] = useState([]);\r\n  const [novoServico, setNovoServico] = useState('');\r\n  const [modalServicoVisible, setModalServicoVisible] = useState(false);\r\n  const [loadingCep, setLoadingCep] = useState(false);\r\n  const [modalEnderecoVisible, setModalEnderecoVisible] = useState(false);\r\n  const [showDatePicker, setShowDatePicker] = useState(false);\r\n  const [showTimePicker, setShowTimePicker] = useState(false);\r\n\r\n  const [alertVisible, setAlertVisible] = useState(false);\r\n  const [alertInfo, setAlertInfo] = useState({ title: '', message: '' });\r\n  const [onAlertCloseAction, setOnAlertCloseAction] = useState(null);\r\n\r\n  const [actionAlertVisible, setActionAlertVisible] = useState(false);\r\n  const [actionAlertInfo, setActionAlertInfo] = useState({ title: '', message: '' });\r\n  const [onActionAlertConfirm, setOnActionAlertConfirm] = useState(null);\r\n\r\n  // Limpa os campos do formulário\r\n  const limparCampos = () => {\r\n    setNomeCliente('');\r\n    setTelefone('');\r\n    setDataHora(new Date());\r\n    setServico('');\r\n    setValor('');\r\n    setEndereco({ rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n    setStatus('Pendente');\r\n    setAgendamentoEdit(null);\r\n  };\r\n\r\n  // Efeito que roda toda vez que a tela ganha foco\r\n  useFocusEffect(\r\n    useCallback(() => {\r\n      const agendamentoParam = route.params?.agendamento;\r\n      if (agendamentoParam) {\r\n        // Se veio um agendamento para editar, preenche os campos\r\n        setAgendamentoEdit(agendamentoParam);\r\n        setNomeCliente(agendamentoParam.nomeCliente || '');\r\n        setTelefone(agendamentoParam.telefone || '');\r\n        setDataHora(agendamentoParam.dataHora ? new Date(agendamentoParam.dataHora) : new Date());\r\n        setServico(agendamentoParam.servico || '');\r\n        setEndereco(agendamentoParam.endereco || { rua: '', numero: '', bairro: '', cidade: '', estado: '', cep: '' });\r\n        setStatus(agendamentoParam.status || 'Pendente');\r\n        setValor(agendamentoParam.valor ? formatValor(String(agendamentoParam.valor).replace(/\\D/g, '')) : '');\r\n      } else {\r\n        // Se não veio parâmetro, limpa tudo para garantir que é uma nova criação\r\n        limparCampos();\r\n      }\r\n    }, [route.params?.agendamento])\r\n  );\r\n\r\n  useEffect(() => {\r\n    async function loadServicos() {\r\n      // Carrega os serviços salvos no AsyncStorage\r\n      const servicosSalvos = await carregarServicos();\r\n      setServicosExistentes(servicosSalvos);\r\n    }\r\n    loadServicos(); // Chama a função para carregar os serviços quando o componente é montado\r\n  }, []);\r\n\r\n  const handleSaveAgendamento = async () => {\r\n    if (!nomeCliente || !telefone || !dataHora) {\r\n      setAlertInfo({ title: 'Atenção', message: 'Por favor, preencha todos os campos.' });\r\n      setAlertVisible(true);\r\n      return;\r\n    }\r\n    try {\r\n      await salvarAgendamento({ nomeCliente, telefone, dataHora, servico, valor, endereco, status, uid: user.uid }, agendamentoEdit?.id);\r\n      setAlertInfo({ title: \"Sucesso\", message: `Agendamento ${agendamentoEdit ? 'atualizado' : 'cadastrado'}!` });\r\n      setOnAlertCloseAction(() => () => {\r\n        limparCampos();\r\n        navigation.goBack();\r\n      });\r\n      setAlertVisible(true);\r\n    } catch (error) {\r\n      setAlertInfo({ title: \"Erro\", message: \"Não foi possível salvar o agendamento. Tente novamente.\" });\r\n      setAlertVisible(true);\r\n    }\r\n  };\r\n\r\n  const onChangeDate = (event, selectedDate) => {\r\n    setShowDatePicker(false);\r\n    if (event.type === 'dismissed') return;\r\n    const currentDate = selectedDate || dataHora;\r\n    setDataHora(currentDate);\r\n    if (Platform.OS === 'android') setShowTimePicker(true);\r\n  };\r\n\r\n  const onChangeTime = (event, selectedTime) => {\r\n    setShowTimePicker(false);\r\n    if (event.type === 'dismissed') return;\r\n    const updatedDateTime = new Date(dataHora);\r\n    updatedDateTime.setHours(selectedTime.getHours());\r\n    updatedDateTime.setMinutes(selectedTime.getMinutes());\r\n    setDataHora(updatedDateTime);\r\n  };\r\n\r\n  const adicionarServico = async () => {\r\n    const servicoParaAdicionar = novoServico.trim();\r\n\r\n    if (!servicoParaAdicionar) {\r\n      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um serviço!' });\r\n      setAlertVisible(true);\r\n      return;\r\n    }\r\n\r\n    // Verifica se o serviço já existe (ignorando maiúsculas/minúsculas)\r\n    if (servicosExistentes.some(s => s.toLowerCase() === servicoParaAdicionar.toLowerCase())) {\r\n      setAlertInfo({ title: 'Atenção', message: 'Este serviço já foi adicionado.' });\r\n      setAlertVisible(true);\r\n      return;\r\n    }\r\n\r\n    const newList = [...servicosExistentes, servicoParaAdicionar];\r\n    setServicosExistentes(newList);\r\n\r\n    // Salva a lista completa no AsyncStorage\r\n    await salvarServicos(newList);\r\n\r\n    setServico(servicoParaAdicionar);\r\n    setNovoServico('');\r\n    setModalServicoVisible(false);\r\n  };\r\n\r\n\r\n  const removerServico = (index) => {\r\n    const servicoParaRemover = servicosExistentes[index];\r\n    if (!servicoParaRemover) return;\r\n\r\n    setActionAlertInfo({ title: 'Excluir Serviço', message: `Tem certeza que deseja excluir \"${servicoParaRemover}\"?` });\r\n\r\n    // Define a função que será executada ao confirmar a exclusão\r\n    setOnActionAlertConfirm(() => async () => {\r\n      const newList = servicosExistentes.filter((_, i) => i !== index);\r\n      setServicosExistentes(newList);\r\n\r\n      // Salva a lista atualizada no AsyncStorage\r\n      await salvarServicos(newList);\r\n\r\n      // Se o serviço removido era o que estava selecionado, limpa a seleção\r\n      if (servico === servicoParaRemover) setServico('');\r\n    });\r\n\r\n    setActionAlertVisible(true);\r\n  };\r\n\r\n\r\n  const selecionarServico = (servicoSelecionado) => {\r\n    setServico(servicoSelecionado);\r\n    setModalServicoVisible(false);\r\n  };\r\n\r\n\r\n  // busca o cep\r\n  const handleSearchCep = async () => {\r\n    setLoadingCep(true);\r\n\r\n    if (!endereco.cep || endereco.cep.length !== 8) {\r\n      setAlertInfo({ title: 'Atenção', message: 'Por favor, informe um CEP válido.' });\r\n      setAlertVisible(true);\r\n      setLoadingCep(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const resultado = await buscarCep(endereco.cep);\r\n      if (resultado) {\r\n        setEndereco(prev => ({ ...prev, ...resultado }));\r\n      }\r\n    } catch (error) {\r\n      setAlertInfo({ title: 'Erro', message: error.message });\r\n      setAlertVisible(true);\r\n    } finally {\r\n      setLoadingCep(false);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const saveEndereco = () => {\r\n    const { rua, numero, bairro, cidade, estado, cep } = endereco;\r\n    if (!rua || !numero || !bairro) {\r\n      setAlertInfo({ title: 'Erro', message: 'Preencha todos os campos do endereço!' });\r\n      setAlertVisible(true);\r\n      return;\r\n    }\r\n    setModalEnderecoVisible(false);\r\n    setAlertInfo({ title: 'Sucesso', message: 'Endereço salvo!' });\r\n    setAlertVisible(true);\r\n\r\n  };\r\n\r\n  const formatTelefone = (text) => {\r\n    let cleaned = text.replace(/\\D/g, '');\r\n    if (cleaned.length > 11) cleaned = cleaned.slice(0, 11);\r\n    if (cleaned.length <= 2) return `(${cleaned}`;\r\n    if (cleaned.length <= 6) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2)}`;\r\n    if (cleaned.length <= 10) return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7)}`;\r\n    return `(${cleaned.slice(0, 2)}) ${cleaned.slice(2, 7)}-${cleaned.slice(7, 11)}`;\r\n  };\r\n\r\n  const formatValor = (text) => {\r\n    let cleaned = text.replace(/\\D/g, '');\r\n    if (!cleaned) return '';\r\n    let num = parseInt(cleaned, 10);\r\n    let formatted = (num / 100).toFixed(2);\r\n    formatted = formatted.replace('.', ',').replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n    return formatted;\r\n  };\r\n\r\n  return (\r\n    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.container}>\r\n      <CustomAlert\r\n        visible={alertVisible}\r\n        title={alertInfo.title}\r\n        message={alertInfo.message}\r\n        onClose={() => {\r\n          setAlertVisible(false);\r\n          if (typeof onAlertCloseAction === 'function') onAlertCloseAction();\r\n          setOnAlertCloseAction(null); // Limpa a ação após a execução\r\n        }}\r\n      />\r\n      /> \r\n      <ScrollView contentContainerStyle={{ paddingBottom: 40 }}>\r\n        <View style={{ alignItems: 'center' }}>\r\n          <Text style={styles.headerTitle}>{agendamentoEdit ? 'Editar Agendamento' : 'Novo Agendamento'}</Text>\r\n        </View>\r\n\r\n        <Text style={styles.label}>Nome do Cliente*</Text>\r\n        <View style={styles.inputIconRowBox}>\r\n          <Ionicons name=\"person-outline\" size={20} color={colors.secondary} />\r\n          <TextInput\r\n            style={styles.inputBox}\r\n            value={nomeCliente}\r\n            onChangeText={setNomeCliente}\r\n            placeholder=\"Nome completo\"\r\n            placeholderTextColor={colors.gray}\r\n          />\r\n        </View>\r\n\r\n        <Text style={styles.label}>Telefone*</Text>\r\n        <View style={styles.inputIconRowBox}>\r\n          <Ionicons name=\"call-outline\" size={20} color={colors.secondary} />\r\n          <TextInput\r\n            style={styles.inputBox}\r\n            value={telefone}\r\n            onChangeText={(text) => setTelefone(formatTelefone(text))}\r\n            placeholder=\"(00) 00000-0000\"\r\n            keyboardType=\"phone-pad\"\r\n            placeholderTextColor={colors.gray}\r\n          />\r\n        </View>\r\n\r\n        <Text style={styles.label}>Data e Hora*</Text>\r\n        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setShowDatePicker(true)}>\r\n          <MaterialIcons name=\"date-range\" size={20} color={colors.secondary} />\r\n          <Text style={{ color: colors.text }}>{dataHora.toLocaleString('pt-BR')}</Text>\r\n        </TouchableOpacity>\r\n\r\n        {showDatePicker && (\r\n          <DateTimePicker value={dataHora} mode=\"date\" display=\"default\" onChange={onChangeDate} />\r\n        )}\r\n        {showTimePicker && (\r\n          <DateTimePicker value={dataHora} mode=\"time\" display=\"default\" onChange={onChangeTime} />\r\n        )}\r\n\r\n        <Text style={styles.label}>Serviço</Text>\r\n        <TouchableOpacity style={[styles.input, styles.inputIconRow]} onPress={() => setModalServicoVisible(true)}>\r\n          <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n          <View style={{ width: 8 }} />\r\n          <Text style={{ color: servico ? colors.text : colors.gray }}>{servico || 'Selecione um serviço'}</Text>\r\n        </TouchableOpacity>\r\n\r\n        <Text style={styles.label}>Valor (R$)</Text>\r\n        <View style={styles.inputIconRowBox}>\r\n          <FontAwesome5 name=\"money-bill-wave\" size={18} color={colors.secondary} />\r\n          <TextInput\r\n            style={styles.inputBox}\r\n            value={valor}\r\n            onChangeText={(text) => setValor(formatValor(text))}\r\n            placeholder=\"0,00\"\r\n            keyboardType=\"numeric\"\r\n            placeholderTextColor={colors.gray}\r\n          />\r\n        </View>\r\n\r\n        <TouchableOpacity style={styles.buttonEndereco} onPress={() => setModalEnderecoVisible(true)}>\r\n          <Ionicons name=\"location-outline\" size={18} color={colors.white} />\r\n          <Text style={styles.textButtonEndereco}>Cadastrar Endereço</Text>\r\n        </TouchableOpacity>\r\n\r\n        {/* Modal de serviços */}\r\n        <Modal visible={modalServicoVisible} animationType=\"slide\" transparent>\r\n          <View style={styles.modalContainer}>\r\n            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n                <Text style={styles.headerTitle}>Serviços</Text>\r\n                <View style={styles.servicoInputRow}>\r\n                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n                    <FontAwesome5 name=\"tools\" size={18} color={colors.secondary} />\r\n                    <TextInput\r\n                      style={styles.inputBox}\r\n                      value={novoServico}\r\n                      onChangeText={setNovoServico}\r\n                      placeholder=\"Novo serviço\"\r\n                      placeholderTextColor={colors.gray}\r\n                      onSubmitEditing={adicionarServico}\r\n                      returnKeyType=\"done\"\r\n                    />\r\n                  </View>\r\n                  <TouchableOpacity\r\n                    style={[styles.buttonAddServico, { marginLeft: 8, height: 48, width: 48, borderRadius: 8, alignItems: 'center', justifyContent: 'center', paddingHorizontal: 0 }]}\r\n                    onPress={adicionarServico}\r\n                  >\r\n                    <MaterialIcons name=\"save\" size={26} color=\"#fff\" />\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <View style={{ maxHeight: 200 }}>\r\n                  {servicosExistentes.map((s, idx) => (\r\n                    <TouchableOpacity key={idx} style={styles.servicoItem} onPress={() => selecionarServico(s)}>\r\n                      <Text style={{ color: colors.text }}>{s}</Text>\r\n                      <TouchableOpacity onPress={() => removerServico(idx)}>\r\n                        <MaterialIcons name=\"delete\" size={22} color={colors.error} style={{ marginLeft: 10 }} />\r\n                      </TouchableOpacity>\r\n                    </TouchableOpacity>\r\n                  ))}\r\n                </View>\r\n              </ScrollView>\r\n              <View style={{ width: '100%', paddingTop: 8 }}>\r\n                <TouchableOpacity style={[styles.buttonCloseModal, { width: '100%', marginRight: 0, marginTop: 0 }]} onPress={() => setModalServicoVisible(false)}>\r\n                  <Text style={styles.buttonTextCloseModal}>Fechar</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n          </View>\r\n        </Modal>\r\n\r\n        {/* Modal de endereço */}\r\n        <Modal visible={modalEnderecoVisible} animationType=\"slide\" transparent>\r\n          <View style={styles.modalContainer}>\r\n            <View style={[styles.modalBox, { maxHeight: '85%' }]}>\r\n              <ScrollView contentContainerStyle={{ paddingBottom: 16 }} showsVerticalScrollIndicator={false}>\r\n                <Text style={styles.modalTitle}>Endereço</Text>\r\n                <Text style={styles.label}>CEP*</Text>\r\n                <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>\r\n                  <View style={[styles.inputIconRowBox, { flex: 1, marginBottom: 0 }]}>\r\n                    <MaterialIcons name=\"location-searching\" size={20} color={colors.secondary} />\r\n                    <TextInput\r\n                      style={styles.inputBox}\r\n                      value={endereco.cep}\r\n                      onChangeText={cep => setEndereco({ ...endereco, cep })}\r\n                      placeholder=\"CEP\"\r\n                      keyboardType=\"numeric\"\r\n                      placeholderTextColor={colors.gray}\r\n                    />\r\n                  </View>\r\n                  <TouchableOpacity style={styles.buttonBuscarCep} onPress={handleSearchCep}>\r\n                    {loadingCep ? <ActivityIndicator color=\"#fff\" /> : <MaterialIcons name=\"search\" size={22} color=\"#fff\" />}\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                {['rua', 'numero', 'bairro', 'cidade', 'estado'].map((campo, i) => (\r\n                  <React.Fragment key={i}>\r\n                    <Text style={styles.label}>{campo.charAt(0).toUpperCase() + campo.slice(1)}*</Text>\r\n                    <View style={styles.inputIconRowBox}>\r\n                      <MaterialIcons name={campo === 'numero' ? 'pin' : campo === 'cidade' ? 'location-city' : 'streetview'} size={20} color={colors.secondary} style={{ marginRight: 8 }} />\r\n                      <TextInput\r\n                        style={styles.inputBox}\r\n                        value={endereco[campo]}\r\n                        onChangeText={(text) => setEndereco({ ...endereco, [campo]: text })}\r\n                        placeholder={campo.charAt(0).toUpperCase() + campo.slice(1)}\r\n                        placeholderTextColor={colors.gray}\r\n                        keyboardType={campo === 'numero' ? 'numeric' : 'default'}\r\n                      />\r\n                    </View>\r\n                  </React.Fragment>\r\n                ))}\r\n\r\n                <View style={{ flexDirection: 'row', justifyContent: 'flex-end', marginTop: 16 }}>\r\n                  <TouchableOpacity style={[styles.buttonCloseModal, { flex: 1, marginRight: 8 }]} onPress={() => setModalEnderecoVisible(false)}>\r\n                    <Text style={styles.buttonTextCloseModal}>Cancelar</Text>\r\n                  </TouchableOpacity>\r\n                  <TouchableOpacity style={[styles.buttonSaveModal, { flex: 1 }]} onPress={saveEndereco}>\r\n                    <Text style={styles.buttonTextSaveModal}>Salvar</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </ScrollView>\r\n            </View>\r\n          </View>\r\n        </Modal>\r\n\r\n        <ActionAlert\r\n          visible={actionAlertVisible}\r\n          title={actionAlertInfo.title}\r\n          message={actionAlertInfo.message}\r\n          onClose={() => setActionAlertVisible(false)}\r\n          actions={[\r\n            { text: \"Cancelar\", onPress: () => setActionAlertVisible(false) },\r\n            {\r\n              text: \"Excluir\", destructive: true, onPress: () => {\r\n                if (typeof onActionAlertConfirm === 'function') onActionAlertConfirm();\r\n                setActionAlertVisible(false);\r\n              }\r\n            },\r\n          ]}\r\n        />\r\n\r\n      </ScrollView>\r\n\r\n      <View style={styles.footerRow}>\r\n        <TouchableOpacity style={styles.buttonFooterCancel} onPress={() => navigation.goBack()}>\r\n          <Text style={styles.buttonTextCancel}>Cancelar</Text>\r\n        </TouchableOpacity>\r\n        <TouchableOpacity style={styles.buttonFooter} onPress={handleSaveAgendamento}>\r\n          <Text style={styles.buttonTextFooter}>{agendamentoEdit ? 'Salvar' : 'Agendar'}</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </KeyboardAvoidingView>\r\n  );\r\n}\r\n"
        }
    ]
}